package SBV;
#------------------------------------------------+
#    [APM] This moudle is generated by amp.pl    |
#    [APM] Creat time: 2013-05-13 09:02:41       |
#------------------------------------------------+
=head1 Name

SBV

=head1 Synopsis

This module is not meant to be used directly

=head1 Feedback

Author: Peng Ai
Email:  aipeng0520@163.com

=head1 Version

Version history

=head2 v1.0

Date: 2013-05-13 09:02:41

=cut

#--------------------------------------------
# public moudles

use strict;
use warnings;

require Exporter;
our @ISA = qw(Exporter);

use SVG (-nocredits=>1,-inline=>1);
use FindBin;
use File::Basename qw(dirname basename);
use Carp qw(carp confess croak);
use Data::Dumper;

#---------------------------------------------
# private moudles
use lib "$FindBin::RealBin";
use lib "$FindBin::RealBin/lib";

use SBV::DEBUG;
use SBV::CONF;
use SBV::Constants;
use SBV::Colors;
use SBV::CSS;
use SBV::DATA;
use SBV::DATA::Frame;
use SBV::DATA::Align;
use SBV::DATA::Karyotype;
use SBV::DATA::Fasta;
use SBV::IMAGE;

#---------------------------------------------
# global var
our ($VERSION, %OPT, $conf, $colors, $svg, $idnum, $defs, $allStyle, $fonts);

$VERSION = "1.0 beta";
$idnum = 1;

#---------------------------------------------
# sub routines

=pod

SBV->run(%OPT)
run SBV (SVG Bioinformatic Visualization) code to creat SVG image

=cut
sub run
{
	my $package = shift;
	%OPT = %{ $_[0] };

	# version
	if ($OPT{'version'})
	{
		print $APP_NAME , $VERSION , "\n";
		exit 1;
	}
	
	# not define 'type'
	if (! $OPT{'type'})
	{
		#$OPT{'type'} = "CMD";
		ERROR("no_type");
	}
	
	#-----------------------------
	# define the image type
	#-----------------------------
	my $type = $OPT{'type'};

	my %image = (
		CMD       => \&CMD, # under development
		auto      => \&auto, # you can combination all type graphs with this cmd

		# basic diagram
		pie       => \&pie,

		# ggplot2 like diagram
		# bubble, bar, boxplot, points, lines, hline, vline, crossbar, errbar, etc.
		ggplot2   => \&ggplot2,
		boxplot   => \&boxplot,
		bubble    => \&bubble,

		# self define diagram for Bioinformatic
		rplot     => \&rplot,
		maplot    => \&maplot,
        volcano   => \&volcano,
		manhattan => \&manhattan,
		chrplot   => \&chrplot,
		
		venn      => \&venn,
		
		# frequency distribution graph of dnas or proteins aligned
		freq      => \&freq,

		# Alignment Visualization
		lasv      => \&lasv, # Local Alignment Search Visualization

		# phylogenetic tree Visualization
		tree      => \&tree,
		heatmap   => \&heatmap,
		taxtree   => \&taxtree,

		# karyo
		karyo    => \&karyo,
		
		# human chromosomes G-banding diagram
		# if you want to draw karyo with vertical model, hcgd is a better choice
		hcgd => \&hcgd,

		# ppi 
		ppi      => \&ppi,

		# sequence dress up image 
		sdu => \&sdu,

		# combination bar plot, added 10/31/2015 01:24:53 PM
		combar => \&combar,
	);

	if (! $image{$type})
	{
		ERROR('image_type_err',$type);
	}

	# check and init the configuration file
	if (! $OPT{'conf'})
	{
		WARN("the configuration file is not set","default configuration file sbv.conf will be used");
		$OPT{'conf'} = "$type.conf";
	}

	$conf = SBV::CONF::load_conf($OPT{'conf'});
	
	# styles conf
	if (! exists $conf->{styles})
	{
		# set the default pattern for each type
		my %pattern = (
			auto      => "tree",
			plot      => "ggplot2",
			ggplot2   => "ggplot2",
			venn      => "venn",
			pie       => "pie",
			rplot     => "ggplot2",
			manhattan => "general",
			chrplot   => "general",
			maplot    => "ggplot2",
            volcano   => "general",
			boxplot   => "ggplot2",
			bubble    => "ggplot2",
			lasv      => "lasv",
			sdu       => "general",
			freq      => "ggplot2",
			tree      => "tree",
			heatmap   => "heatmap",
			taxtree   => "taxtree",
			karyo     => "karyo",
			ppi       => "ppi",
			hcgd      => "karyo",
			combar    => "combar", # added 10/31/2015 01:23:09 PM
		);
		
		$OPT{pattern} = $pattern{$type} ? $pattern{$type} : "general" if (! exists $OPT{pattern});
		my $pattern = $OPT{pattern};
		$conf->{styles} = SBV::CONF::load_conf("styles/styles.$pattern.conf");
	}
	
	timeLOG("configuration file was loaded");

	#---------------------
	# load colors 
	#---------------------
	# colors conf
	if (! $conf->{colors})
	{
		$conf->{colors} = SBV::CONF::load_conf("colors/colors.svg.conf");
	}
	
	if ($conf->{colors})
	{
		$colors = SBV::Colors::load_colors($conf->{colors});
		timeLOG("colors' config was read");
	}

	#-------------------------------------------------------------------------------
	#  load fonts file
	#-------------------------------------------------------------------------------
	my @fonts_path = ("$FindBin::RealBin/../fonts/afm");
	SBV::Font::load_font(@fonts_path);	
	timeLOG("load fonts files done");
	
	#-----------run Type draw----------
	if ($type eq "lasv") # with multi lasv SVG graph generate at one time
	{
		&{$image{$type}}();
	}
	else
	{
		initSVG();
		$type eq "auto" ? &{$image{$type}}(%image) : &{$image{$type}}();
		$OPT{'out'} ? saveSVG($OPT{'out'}) : saveSVG();
	}
	#-----------Draw DONE------------
}


#------------------------------------------+
#               SBV type                   |
#------------------------------------------+
sub auto 
{
	my %image = @_;

	foreach my$tag (%$conf)
	{
		my $val = $conf->{$tag};
		next if (!defined $image{$tag});
		if (ref $val eq "HASH")
		{
			SBV::CONF::fetch_conf($tag,$conf,$val);
			&{$image{$tag}}($val);
		}
		elsif (ref $val eq "ARRAY")
		{
			foreach (@$val)
			{
				SBV::CONF::fetch_conf($tag,$conf,$_);
				&{$image{$tag}}($_);
				return;
			}
		}
	}
}

sub pie {launch_graph('pie','file');}
sub ggplot2 {launch_graph('ggplot2','frame');}
sub boxplot {launch_graph('boxplot','frame');}
sub bubble {launch_graph('bubble','frame');}
sub maplot {launch_graph('maplot','frame');}
sub volcano {launch_graph('volcano','frame');}
sub manhattan {launch_graph('manhattan','frame');}
sub chrplot {launch_graph('chrplot','frame');} 
sub venn {launch_graph('venn',"list2")}
sub lasv {launch_graph('lasv','align')}
sub freq {launch_graph('freq','file')}
sub tree {launch_graph('tree',"file")}
sub heatmap {launch_graph('heatmap','file')} 
sub taxtree {launch_graph('taxtree','file')} 
sub karyo {launch_graph('karyo','karyotype')} 
sub ppi {launch_graph('ppi','file')}
sub sdu {launch_graph('sdu','fasta')}
sub hcgd {launch_graph('hcgd','file')}
sub combar {launch_graph('combar','file')}

# rplot 
sub rplot
{
	my $pconf = SBV::CONF::fetch_first_conf('rplot');
	my @dataFiles = @ARGV || SBV::CONF::fetch_val($pconf,"file");
	ERROR('no_file') if (! @dataFiles);

	@dataFiles = map {check_path($_)} @dataFiles;
	SBV::IMAGE::RPLOT(\@dataFiles,$pconf);
}

# launch the graph draw
sub launch_graph
{
	my $graph = shift;
	my $format = shift;

	my $pconf = SBV::CONF::fetch_first_conf("$graph");
	my $dataFile = shift @ARGV || $pconf->{'file'};
	ERROR('no_file') if (! $dataFile);
	
	$dataFile = check_path($dataFile);
	my $data;
	
	if ($format eq "frame")
	{
		$data = SBV::DATA::Frame->new($dataFile,header=>$pconf->{header},rownames=>$pconf->{rownames});
	}
	elsif ($format eq "align")
	{
		$data = SBV::DATA::Align->new(-file=>$dataFile,-key=>$pconf->{key});
	}
	elsif ($format eq "karyotype")
	{
		$data = SBV::DATA::Karyotype::read_karyotype_file($dataFile);
	}
	elsif ($format eq "fasta")
	{
		$data = SBV::DATA::Fasta::read_fasta_file($dataFile);
	}
	elsif ($format eq "file")
	{
		$data = $dataFile;
	}
	else
	{
		$data = SBV::DATA->new(-file=>$dataFile,-format=>$pconf->{format},-conf=>$pconf);
	}
	
	my %func = (
		maplot    => \&SBV::IMAGE::MAPLOT,
		volcano   => \&SBV::IMAGE::Volcano_plot,
		venn      => \&SBV::IMAGE::VENN,
		ggplot2   => \&SBV::IMAGE::GGPLOT2,
		pie       => \&SBV::IMAGE::PIE,
		boxplot   => \&SBV::IMAGE::BOXPLOT,
		bubble    => \&SBV::IMAGE::BUBBLE,
		manhattan => \&SBV::IMAGE::MANHATTAN,
		chrplot   => \&SBV::IMAGE::CHRPLOT,
		freq      => \&SBV::IMAGE::FREQ,
		lasv      => \&SBV::IMAGE::LASV,
		tree      => \&SBV::IMAGE::TREE,
		heatmap   => \&SBV::IMAGE::HEATMAP,
		taxtree   => \&SBV::IMAGE::TAXTREE,
		karyo     => \&SBV::IMAGE::KARYO,
		ppi       => \&SBV::IMAGE::PPI,
		sdu       => \&SBV::IMAGE::SDU,
		hcgd      => \&SBV::IMAGE::HCGD,
		combar    => \&SBV::IMAGE::COMBAR,
	);

	&{$func{$graph}}($data,$pconf);
}

# histogram
sub CMD
{
	print "CMD model is developing\n";
	return;
	print ">>";
	while(<STDIN>)
	{
		eval($_);
		if ($@)
		{
			vital_warn( $@ );
		}
		print ">>";
	}
}

#-------------------------------------------------+
#        SVG action to draw image                 |
#-------------------------------------------------+
#----------------------
# init SBV SVG
#----------------------
sub initSVG
{
	if ($svg)
	{
		vital_warn("SVG object alredy exists!");
		return;
	}

	$conf->{margin} = "20" if (! $conf->{margin});
	$svg = SVG->new(width=>$conf->{width},height=>$conf->{height},id=>"sbv$idnum");
	$idnum ++;

	timeLOG("SVG object was created");
	
	# add the title for map which is generated by 'SBV'
	$svg->title(id=>'sbv-title')->cdata("The graph of SBV $OPT{'type'}");
	$svg->desc(id=>'sbv-desc')->cdata("This graph was generated by SBV which was written by Peng. E-mail is aipeng0520\@163.com");

	# init defs
	$defs = $svg->defs(id=>"defs$idnum");
	$idnum++;
	
	# init css styles
	if ($conf->{styles})
	{
		$allStyle = SBV::CSS->new($conf->{styles});
	}

	# fill the background
	SBV::DRAW::background($conf,$svg);

	return $svg;
}

#-----------------------
# save SBV SVG image
#-----------------------
sub saveSVG
{
	if (!$svg)
	{
		vital_warn("SVG object is not defined!");
		return;
	}
	
	&add_legends();
    &add_axes();
	
	my $css = $allStyle->print_css();

	if ($css ne "")
	{
		$defs->style(type=>"text/css")->CDATA($css);
		timeLOG("styles' config was turn to internal css");
	}

	my ($dir,$file);

	if (@_)
	{
		$dir = dirname($_[0]);
		$file = basename($_[0]);
	}
	else
	{
		$dir = $conf->{dir} || ".";
		$file = $conf->{file} || $OPT{type};
	}
	
	# create dir if not exists
	mkdir $dir unless -d $dir;

	# add svg suffix to file name
	$file .= ".svg" if ($file !~ /\.svg$/i);

	open OUT,">","$dir/$file" or die "can't open file $!";
	my $print = $svg->xmlify;
	$print =~ s/&#206;&#148;/Δ/g;
	print OUT $print;
	#print OUT $svg->xmlify;
	close OUT;
	timeLOG("$dir/$file was created");
}


#-------------------------------------------------------------------------------
#  add the legends to the figure 
#-------------------------------------------------------------------------------
sub add_legends
{
	return unless $conf->{legends};
	
	my @legends = SBV::CONF::extract_conf($conf->{legends},"legend");
	foreach (@legends)
	{
		my $legend = SBV::STONE::LEGEND->new(conf=>$_);
		$legend->location($conf);
		$legend->draw($svg);
	}
}

sub add_axes {
    return unless $conf->{axes};

    my @axes = SBV::CONF::extract_conf($conf->{axes},"axis");
    foreach (@axes){
        my $axis = SBV::STONE::AXIS->new();
        $axis->aes($_);
        $axis->plot();
    }
}

#------------------------
# exit the SBV program
#------------------------
sub quit()
{
	timeLOG('exit SBV program');
	exit;
}
