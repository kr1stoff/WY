package SBV::CSS;
#------------------------------------------------+
#    [APM] This moudle is generated by amp.pl    |
#    [APM] Creat time: 2013-05-14 15:16:21       |
#------------------------------------------------+
=pod

=head1 Name

SBV::CSS

=head1 Synopsis

This module is not meant to be used directly

=head1 Feedback

Author: Peng Ai
Email:  aipeng0520@163.com

=head1 Version

Version history

=head2 v1.0

Date: 2013-05-14 15:16:21

=cut

use strict;
use warnings;

use base 'Exporter';
my @Export = qw(load_styles);

use FindBin;

use lib "$FindBin::RealBin";
use lib "$FindBin::RealBin/../";
use lib "$FindBin::RealBin/../lib";
use SBV;
use SBV::DEBUG;
use SBV::Colors;

#===  FUNCTION  ================================================================
#         NAME: new
#      PURPOSE: creat style hash 
#   PARAMETERS: conf styles hash
#      RETURNS: style hash
#     SEE ALSO: n/a
#===============================================================================
sub new
{
	my $class = shift;
	my $conf = shift;
	my $styles = {};

	&do_init_style($styles);
	&conf_styles_parse($conf,$styles);

	undef $styles->{all}->{CLASSbackground} if ($SBV::conf->{background} ne "open");
	
	bless $styles , $class;
	return $styles;
}

# set the default general styles
sub do_init_style
{
	my $styles = shift;

	$styles->{svg}->{default} = 
		{'stroke-width' => 1,stroke => '000', fill => 'none'};

	$styles->{all}->{CLASSbackground} = {fill => '9cf', 'stroke-width' => 0}
		if ($SBV::conf->{background} eq "open");

	$styles->{text}->{default} = 
		{'stroke-width' => 0, fill => '000', 'font-size' => 12,
		'font-family' => 'Courier', 'font-weight' => 'normal',
		'font-style' => 'normal'};
}

# parse the styles conf hash
sub conf_styles_parse 
{
	my $conf = shift;
	my $styles = shift;

	foreach my$name(keys %$conf)
	{
		my $val = $conf->{$name};

		if (ref $val eq "HASH")
		{
			parse_style($name,$val,$styles);
		}
		elsif (ref $val eq "ARRAY")
		{
			parse_style($name,$_,$styles) for (@$val);
		}
	}
}

# parse the style
sub parse_style
{
	my $name = shift;
	my $val = shift;
	my $styles = shift;

	my %colorTag = (fill => 1, stroke => 1, background => 1);
	my $key = "default";
	
	if ($val->{id})
	{
		$key = "ID" . $val->{id};
	}
	elsif ($val->{class})
	{
		$key = "CLASS" . $val->{class};
	}
	
	foreach my$tag(keys %$val)
	{
		next if ($tag eq "id" || $tag eq "class");

		my $value = $val->{$tag};
		$value = SBV::Colors::fetch_color($value) if ($colorTag{$tag});

		$styles->{$name}->{$key}->{$tag} = $value;
	}
}

sub print_css
{
	my $self = shift;
	
	my $css = "";	

	foreach my$name (keys %$self)
	{
		foreach my$key (keys %{$self->{$name}})
		{
			next if (! $self->{$name}->{$key});

			if ($key =~ /^ID(.+)/)	
			{
				$css .= "\#$1 $name {\n";
			}
			elsif ($key =~ /^CLASS(.+)/)
			{
				$css .= $name eq "all" ? "\.$1 {\n" : "$name.$1 \{\n";
			}
			elsif ($key eq "default")
			{
				$css .= "$name {\n";
			}
			else 
			{
				ERROR("illegal_style",$key);	
			}

			foreach my$item (keys %{$self->{$name}->{$key}})
			{
				my $val = $self->{$name}->{$key}->{$item};
				next if ($val eq "");
				$val .= 'px' if ($item eq 'font-size');
				$css .= "$item\: $val;\n";
			}

			$css .= "}\n\n";
		}
	}
	
	return $css;
}

# fetch symbol css string for SVG
sub fetch_symbol_css
{
	my $class = $_[0];
	
	$class =~ s/symbol//;

	my $lwd = substr $class , 1 , 1;
	my $opacity = substr $class , 2 , 2;
	$opacity = hex($opacity)/100;

	my $col = substr $class , 4 , 6;
	my $fill = substr $class , 10;
	$fill = "#$fill" if ( $fill ne "none");

	return qq(\.$_[0] {
stroke-width:$lwd;
stroke:#$col;
fill:$fill;
fill-opacity:$opacity;
}
); 
}
