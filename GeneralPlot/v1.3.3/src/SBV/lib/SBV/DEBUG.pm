package SBV::DEBUG;
#------------------------------------------------+
#    [APM] This moudle is generated by amp.pl    |
#    [APM] Creat time: 2013-05-13 09:47:42       |
#------------------------------------------------+
=pod

=head1 Name

SBV::DEBUG => debug routines for SBV

=head1 Synopsis

This module is not meant to be used directly

=head1 Feedback

Author: Peng Ai
Email:  aipeng0520@163.com

=head1 Version

Version history

=head2 v1.0

Date: 2013-05-13 09:47:42

=cut


use strict;
use warnings;

require Exporter;
our @ISA = qw(Exporter);
our @EXPORT    = qw(timeLOG LOG WARN ERROR check_path check_tree_file vital_warn);

use FindBin;
use Carp qw(carp confess croak);
use Tie::File;

use lib "$FindBin::RealBin";
use lib "$FindBin::RealBin/../";
use SBV::Error;
use SBV;

sub timeLOG
{
	my $timeH = "[" . ftime() . "]";
	print "$timeH @_\n" if (! defined $SBV::OPT{'quiet'});
}

sub LOG
{
	print "@_\n" if (! defined $SBV::OPT{'quiet'});
}

sub WARN
{
	carp "WARN: @_\n" if (! defined $SBV::OPT{'quiet'} && defined $SBV::OPT{'strict'});
}

sub vital_warn
{
	print STDERR "VITAL WARN: @_\n";
}

sub ERROR
{
	my $ename = shift;
	my $error = $SBV::Error::ERROR{$ename};
	confess "FATAL ERROR: $error, [@_]\n";
}

sub check_path
{
	foreach my $file (@_)
	{
		my @posibilities = (
				$file,
				"$FindBin::RealBin/$file",
				"$FindBin::RealBin/../$file",
				"$FindBin::RealBin/etc/$file",
				"$FindBin::RealBin/../etc/$file",
				"$FindBin::RealBin/../data/$file",
				"$FindBin::RealBin/data/$file",
				"$FindBin::RealBin/example/$file",
				"$FindBin::RealBin/../example/$file"
				);
		my $fullfile;
		
		foreach (@posibilities)
		{
			if (-e $_ && -r _)
			{
				$fullfile = $_;
				return $_;
			}
		}
		
	}
	
	ERROR("no_file_exists",@_);
}

sub check_tree_file
{
	my $file = shift;
	
	tie my @array , "Tie::File" , $file or die $!;
	
	for (@array)
	{
		s/$&/${[sprintf("%2f",$&)]}[0]/g if(/([\d\.]+)e\-(\d+)/);
	}
	
	untie @array;
}

sub ftime
{
	my ($sec,$min,$hour,$day,$mon,$year,$wday,$yday,$isdst)=localtime();
	$year += 1900;
	$mon += 1;
	 
	my $ftime = sprintf("%d\-%02d\-%02d %02d:%02d:%02d",$year,$mon,$day,$hour,$min,$sec);
	return $ftime;
}
