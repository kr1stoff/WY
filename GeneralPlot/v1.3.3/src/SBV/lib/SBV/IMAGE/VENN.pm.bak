package SBV::IMAGE::VENN;
#------------------------------------------------+
#    [APM] This moudle is generated by amp.pl    |
#    [APM] Created time: 2013-07-17 11:18:50     |
#------------------------------------------------+
=pod

=head1 Name

SBV::IMAGE::VENN

=head1 Synopsis

This module is not meant to be used directly

=head1 Feedback

Author: Peng Ai
Email:  aipeng0520@163.com

=head1 Version

Version history

=head2 v1.0

Date: 2013-07-17 11:18:50

=cut

use strict;
use warnings;
require Exporter;

use FindBin;
use lib "$FindBin::RealBin";
use lib "$FindBin::RealBin/lib";
use lib "$FindBin::RealBin/..";
use lib "$FindBin::RealBin/../lib";

use SBV::STAT;
use SBV::Constants;
use SBV::DEBUG;
use SBV::Colors;

use Math::Round;

sub new
{
	my $class = shift;
	my $data = shift;
	
	my $venn =  {};
	$venn->{data} = $data;

	bless $venn , $class;

	return $venn;
}

sub stat
{
	my $venn = shift;
	my $data = $venn->{data};
	
	my @names = $data->names;
	my $num = scalar @names;
	
	ERROR('venn_sample_num_err',"$num, maybe you forgot to set format as 'list3'") if ($num > 100);
	
	my @logic_bins;
	if ($num <= 6)
	{
		my $min = 2**$num + 1;
		my $max = 2**$num + 2**$num - 1;
		@logic_bins = map { 
			my $binary = sprintf("%b",$_) + 0; 
			my $bin    = substr $binary , 1; 
			$bin
		} $min .. $max;
	}
	else 
	{
        foreach my $i (0 .. $num-1)
		{
			my @init_bins = (0) x $num;
			$init_bins[$i] = 1;
			my $bin = join "" , @init_bins;
			push @logic_bins , $bin;
		}
		push @logic_bins , 1 x $num;
	}
    
	for my$bin(@logic_bins)
	{
		my @temp = split // , $bin;
		my @anames;

		my (@list0,@list1);
		
		for (0 .. $#temp)
		{
			if (0 == $temp[$_])
			{
				push @list0 , $data->{$names[$_]};
			}
			else
			{
				push @list1 , $data->{$names[$_]};
				push @anames , $names[$_];
			}
		}
		
		my $iset = iset(@list1);
		my $uset = uset(@list0);
		my $myset = cset($iset,$uset);
		
		my $res = scalar @$myset;
		$venn->{stat}->{$bin} = $res;

		my $line = join "," , @$myset;
		my $namestr = join "," , @anames;
		my $record =  "$namestr\t$res\t$line";
		$venn->{venn}->{$bin} = $record;
	}
}

sub print
{
	my $self = shift;
	my $res = $self->{venn};
	my %opts = @_;

	my $outFH = *STDERR;
	if ($opts{'-file'} && $opts{'-file'} ne "STDERR")
	{
		my $ofile = $opts{'-file'};
		open $outFH,">$ofile" or die $!;
	}

	foreach my$key (sort {$a<=>$b} keys %$res)
	{
		print $outFH "$key\t$res->{$key}\n";
	}
	
	close $outFH;
	return 1;
}

sub graph
{
	my ($venn,$conf,$parent) = @_;
	
	my @names = $venn->names;
	my $num = scalar @names;
	
	if ($num > 5 || $conf->{flower_plot})
	{
		&_venn_more($venn,$conf,$parent);
	}
	else 
	{
		my %draw = (2=>\&_venn2,3=>\&_venn3,4=>\&_venn4,5=>\&_venn5);
		ERROR('venn_sample_num_err',$num) if (!exists $draw{$num});
		&{$draw{$num}}($venn,$conf,$parent);
	}
}

sub animate
{
	my ($venn,$conf,$parent) = @_;
	my $info = $parent->group(class=>"vennDetail");

	my @names = $venn->names;
	my $num = scalar @names;
	return if ($num > 3);
	
	my $ox = $conf->{ox};
	my $oty = $conf->{oty};
	my $w = $conf->{tw};
	my $h = $conf->{th};
	
	my $title_font = SBV::Font->fetch_font("CLASStitle");
	my $title_font_height = $title_font->fetch_text_height;

	my $font = SBV::Font->fetch_font("default");
	my $font_height = $font->fetch_text_height;
	
	my $rect_height = $font_height + 6;
	my $rect_width = $w - 2;

	my $hi = $SBV::conf->{hspace};
	my $vi = $SBV::conf->{vspace};
	my $space = 16;
	my $ix = $ox + $w + 2*$space;
	my $iy = $oty + $title_font_height;
	
	# Set names: set1,set3
	$info->text(x=>$ix, y=>$iy, class=>"title")->cdata("Set names:");
	$iy += $vi;
	$info->rect(x=>$ix, y=>$iy, width=>$rect_width,height=>$rect_height,class=>"text");
	$iy += $rect_height - 2;
	$info->text(x=>$ix + 2, y=>$iy, id=>"set_names")->cdata(" ");
	
	# logical number: 101
	$iy += $space + $title_font_height;
	$info->text(x=>$ix, y=>$iy, class=>"title")->cdata("logical number:");
	$iy += $vi;
	$info->rect(x=>$ix, y=>$iy, width=>$rect_width,height=>$rect_height,class=>"text");
	$iy += $rect_height - 2;
	$info->text(x=>$ix + 2, y=>$iy, id=>"logical_number")->cdata(" ");

	# number
	$iy += $space + $title_font_height;
	$info->text(x=>$ix, y=>$iy, class=>"title")->cdata("Number:");
	$iy += $vi;
	$info->rect(x=>$ix, y=>$iy, width=>$rect_width,height=>$rect_height,class=>"text");
	$iy += $rect_height - 2;
	$info->text(x=>$ix + 2, y=>$iy,id=>"number")->cdata(" ");

	# elements
	$iy += $space + $title_font_height;
	$info->text(x=>$ix, y=>$iy, class=>"title")->cdata("Elements:");
	$iy += $vi;
	my $element_rect_height = $h - ($iy - $oty);
	$info->rect(x=>$ix, y=>$iy, width=>$rect_width,height=>$element_rect_height,class=>"text");
	$iy += $rect_height - 2;
	$info->text(x=>$ix+2, y=>$iy, id=>"elements")->cdata(" ");

	# resize
	my $width = $SBV::svg->getElementByID("sbv1")->getAttribute("width");
	SBV::DRAW::resize(width=>$width+$w+2*$space);

	# main
	my %res = %{$venn->{venn}};
	
	my $venn3 = $SBV::svg->getElementByID("venn3");
	my @objs = $venn3->getChildren();
	
	foreach my$obj(@objs)
	{
		my $id = $obj->getAttribute("id");
		$obj->setAttribute("onclick","vennOnClick(evt)") if ($id && $id =~ /^text/);
	}

	my $js = <<JS;
function block(sets,logical,number,elements)
{
	this.sets= sets;
	this.logical = logical;
	this.number = number;
	this.elements = elements;
}

var venn = new Object();
JS
	
	foreach my$key(keys %res)
	{
		my @tmp = split  /[\t\s]/  , $res{$key};
		if ($#tmp ==1 ){$tmp[2] = ""};
		$js .= qq(venn.text$key = new block("$tmp[0]","$key","$tmp[1]","$tmp[2]");\n);
	}

	$js .= <<JS;
var svgdoc;
var svgns = "http://www.w3.org/2000/svg";

function vennOnClick(evt)
{
	svgdoc = evt.target.ownerDocument;
	var id = evt.target.getAttribute("id");

	var sets = svgdoc.getElementById("set_names");
	var logical = svgdoc.getElementById("logical_number");
	var number = svgdoc.getElementById("number");
	var elements = svgdoc.getElementById("elements");
	
	var target = venn[id];
	var textNode = svgdoc.createTextNode(target.logical);
	logical.replaceChild(textNode,logical.firstChild);
	
	textNode = svgdoc.createTextNode(target.sets);
	sets.replaceChild(textNode,sets.firstChild);

	textNode = svgdoc.createTextNode(target.number);
	number.replaceChild(textNode,number.firstChild);

	textNode = svgdoc.createTextNode(target.elements);
	elements.replaceChild(textNode,elements.firstChild);
}
JS

	$SBV::svg->script(type=>"text/javascript")->CDATA($js);
}

sub names
{
	my $self = shift;
	return $self->{data}->names;
}

#-------------------------------------------------------------------------------
#  venn graph for 2 samples
#-------------------------------------------------------------------------------
sub _venn2 
{
	my ($venn,$conf,$parent) = @_;

	if ($conf->{model} eq "vertical" || $conf->{model} eq "v")
	{
		_venn2_vertical($venn,$conf,$parent);
	}
	else 
	{
		_venn2_horizontal($venn,$conf,$parent);
	}
}

sub _venn2_horizontal
{
	my ($venn,$conf,$parent) = @_;

	my @names = $venn->names;
	
	my $hi = $SBV::conf->{hspace};
	my $vi = $SBV::conf->{vspace};

	my $ox = $conf->{ox};
	my $oy = $conf->{oy};
	my $w = $conf->{tw};
	my $h = $conf->{th};
	
	my $label_font = SBV::Font->fetch_font("CLASSlabel");
	my $labelH = $label_font->fetch_text_height;
	
	# the styles of ellipse or cirlce
	my @styles = SBV::CONF::fetch_venn_style($conf,2);
	
	my $hr = ($h - $vi - $labelH)/2;
	my $wr = ($w)/3; 
	my $r = $hr < $wr ? $hr : $wr;
	$r = nearest 0.001 , $r;

	my $cx1 = $ox + $w/2 - $r/2;
	my $cx2 = $ox + $w/2 + $r/2;
	my $cy = $oy - $hr - $vi - $labelH;
	
	# main graph
	$parent->circle(cx=>$cx1,cy=>$cy,r=>$r,style=>$styles[0],id=>"set1");
	$parent->circle(cx=>$cx2,cy=>$cy,r=>$r,style=>$styles[1],id=>"set2");
	@styles = map {"fill:none;stroke=>#000;"} @styles;
	$parent->circle(cx=>$cx1,cy=>$cy,r=>$r,style=>$styles[0]);
	$parent->circle(cx=>$cx2,cy=>$cy,r=>$r,style=>$styles[1]);
	
	## label
	if ($conf->{show_label})
	{
		#label 1
		my $name1 = shift @names;
		my $labelW1 = $label_font->fetch_text_width($name1);
		my $x1 = $cx1-$labelW1/2;
		my $y1 = $cy+$r+$vi+$labelH;
		$parent->text(x=>$x1,y=>$y1,class=>"label",id=>"label1")->cdata($name1);

		#label 2
		my $name2 = shift @names;
		my $labelW2 = $label_font->fetch_text_width($name2);
		my $x2 = $cx2-$labelW2/2;
		my $y2 = $cy+$r+$vi+$labelH;
		$parent->text(x=>$x2,y=>$y2,class=>"label",id=>"label2")->cdata($name2);
	}
	
	# venn stat result
	my $v10 = $venn->{stat}->{'10'};
	my $v01 = $venn->{stat}->{'01'};
	my $v11 = $venn->{stat}->{'11'};
	if ($conf->{show_logical_label})
	{
		SBV::DRAW::mtext(['10',$v10],$cx1-$r/2,$cy,parent=>$parent,id=>'text10');
		SBV::DRAW::mtext(['01',$v01],$cx2+$r/2,$cy,parent=>$parent,id=>'text01');
		SBV::DRAW::mtext(['11',$v11],$cx1+$r/2,$cy,parent=>$parent,id=>'text11');
	}
	else
	{
		SBV::DRAW::text($v10,$cx1-$r/2,$cy,parent=>$parent,id=>'text10');
		SBV::DRAW::text($v01,$cx2+$r/2,$cy,parent=>$parent,id=>'text01');
		SBV::DRAW::text($v11,$cx1+$r/2,$cy,parent=>$parent,id=>'text11');
	}
}

sub _venn2_vertical
{
	my ($venn,$conf,$parent) = @_;

	my @names = $venn->names;
	
	my $hi = $SBV::conf->{hspace};
	my $vi = $SBV::conf->{vspace};

	my $ox = $conf->{ox};
	my $oy = $conf->{oy};
	my $w = $conf->{tw};
	my $h = $conf->{th};
	
	my $label_font = SBV::Font->fetch_font("CLASSlabel");
	my $labelH = $label_font->fetch_text_height;
	
	# the styles of ellipse or cirlce
	my @styles = SBV::CONF::fetch_venn_style($conf,2);
	
	my $hr = ($h - 4*$vi - 2*$labelH)/3;
	my $wr = ($w - 2*$hi)/2; 
	my $r = $hr < $wr ? $hr : $wr;
	$r = nearest 0.001 , $r;

	my $cx = $ox + $w/2;
	my $cy1 = $oy - $h/2 + $r/2;
	my $cy2 = $oy - $h/2 - $r/2;
	
	# main graph
	$parent->circle(cx=>$cx,cy=>$cy1,r=>$r,style=>$styles[0],id=>"set1");
	$parent->circle(cx=>$cx,cy=>$cy2,r=>$r,style=>$styles[1],id=>"set2");
	@styles = map {"fill:none;stroke=>#000;"} @styles;
	$parent->circle(cx=>$cx,cy=>$cy1,r=>$r,style=>$styles[0]);
	$parent->circle(cx=>$cx,cy=>$cy2,r=>$r,style=>$styles[1]);
	
	## label
	if ($conf->{show_label})
	{
		#label 1
		my $name1 = shift @names;
		my $labelW1 = $label_font->fetch_text_width($name1);
		my $x1 = $cx-$labelW1/2;
		my $y1 = $cy1+$r+$vi+$labelH; 
		$parent->text(x=>$x1,y=>$y1,class=>"label",id=>"label1")->cdata($name1);

		#label 2
		my $name2 = shift @names;
		my $labelW2 = $label_font->fetch_text_width($name2);
		my $x2 = $cx-$labelW2/2;
		my $y2 = $cy2-$r-$vi;
		$parent->text(x=>$x2,y=>$y2,class=>"label",id=>"label2")->cdata($name2);
	}
	
	# venn stat result
	my $v10 = $venn->{stat}->{'10'};
	my $v01 = $venn->{stat}->{'01'};
	my $v11 = $venn->{stat}->{'11'};
	if ($conf->{show_logical_label})
	{
		SBV::DRAW::mtext(['10',$v10],$cx,$cy1+$r/2,parent=>$parent,id=>'text10');
		SBV::DRAW::mtext(['01',$v01],$cx,$cy2-$r/2,parent=>$parent,id=>'text01');
		SBV::DRAW::mtext(['11',$v11],$cx,$cy2+$r/2,parent=>$parent,id=>'text11');
	}
	else
	{
		SBV::DRAW::text($v10,$cx,$cy1+$r/2,parent=>$parent,id=>'text10');
		SBV::DRAW::text($v01,$cx,$cy2-$r/2,parent=>$parent,id=>'text01');
		SBV::DRAW::text($v11,$cx,$cy2+$r/2,parent=>$parent,id=>'text11');
	}
}

#-------------------------------------------------------------------------------
#  venn graph for 3 samples
#-------------------------------------------------------------------------------
sub _venn3
{
	my ($venn,$conf,$parent) = @_;

	my @names = $venn->names;
	
	my $hi = $SBV::conf->{hspace};
	my $vi = $SBV::conf->{vspace};

	my $ox = $conf->{ox};
	my $oy = $conf->{oy};
	my $w = $conf->{tw};
	my $h = $conf->{th};
	
	my $label_font = SBV::Font->fetch_font("CLASSlabel");
	my $labelH = $label_font->fetch_text_height;
	
	# the styles of ellipse or cirlce
	my @styles = SBV::CONF::fetch_venn_style($conf,3);
	
	my $hr = ($h-$labelH-$vi)/(2+$SQRT3/2);
	my $wr = $w/3;
	my $r = $hr < $wr ? $hr : $wr;
	$r = nearest 0.001 , $r;
	
	my $cx3 = $ox + $w/2 ;
	my $cx1 = $cx3 - $r/2;
	my $cx2 = $cx3 + $r/2;

	my $vennH = $r*(2+$SQRT3/2);
	my $topH = ($h - ($vennH+$vi+$labelH)) / 2;

	my $cy1 = $oy - $topH - $r;
	my $cy2 = $cy1;
	my $cy3 = $oy - $h + $topH + $labelH + $vi + $r;

	$parent->circle(cx=>$cx1,cy=>$cy1,r=>$r,style=>$styles[0],id=>"set1");
	$parent->circle(cx=>$cx2,cy=>$cy2,r=>$r,style=>$styles[1],id=>"set2");
	$parent->circle(cx=>$cx3,cy=>$cy3,r=>$r,style=>$styles[2],id=>"set3");
	@styles = map {"fill:none;stroke=>#000;"} @styles;
	$parent->circle(cx=>$cx1,cy=>$cy1,r=>$r,style=>$styles[0]);
	$parent->circle(cx=>$cx2,cy=>$cy2,r=>$r,style=>$styles[1]);
	$parent->circle(cx=>$cx3,cy=>$cy3,r=>$r,style=>$styles[2]);

	# label 
	my ($name1,$name2,$name3) = @names;
	
	my $labelW1 = $label_font->fetch_text_width($name1);
	my $labelW2 = $label_font->fetch_text_width($name2);
	my $labelW3 = $label_font->fetch_text_width($name3);
	my $roy = $cy3 + $r/$SQRT3;
	my $y1 = $roy + $r + $r/$SQRT3 + $vi + $labelH;
	my $y2 = $y1;
	my $y3 = $cy3 - $r - $vi;
	
	if ($conf->{show_label})
	{
		# label 1
		my $label1 = SBV::DRAW::text($name1,$cx3,$y1,class=>"label",yalign=>"bottom",parent=>$parent,id=>"label1");
		$label1->setAttribute("transform","rotate(60,$cx3,$roy)");
		# label 2 
		my $label2 = SBV::DRAW::text($name2,$cx3,$y2,class=>"label",yalign=>"bottom",parent=>$parent,id=>"label2");
		$label2->setAttribute("transform","rotate(-60,$cx3,$roy)",yalign=>"bottom");
		# label 3
		SBV::DRAW::text($name3,$cx3,$y3,class=>"label",yalign=>"bottom",parent=>$parent,"label3");
	}
	# venn stat result 
	my $v001 = $venn->{stat}->{'001'};
	my $v010 = $venn->{stat}->{'010'};
	my $v011 = $venn->{stat}->{'011'};
	my $v100 = $venn->{stat}->{'100'};
	my $v101 = $venn->{stat}->{'101'};
	my $v110 = $venn->{stat}->{'110'};
	my $v111 = $venn->{stat}->{'111'};

	if ($conf->{show_logical_label})
	{
		SBV::DRAW::mtext(['001',$v001],$cx3,$cy3-$r/2,parent=>$parent,id=>'text001');
		SBV::DRAW::mtext(['010',$v010],$cx2+$r/2,$cy2,yalign=>"top",parent=>$parent,id=>'text010');
		SBV::DRAW::mtext(['011',$v011],$cx2,$cy3+$r/4,parent=>$parent,id=>'text011');
		SBV::DRAW::mtext(['100',$v100],$cx1-$r/2,$cy2,yalign=>"top",parent=>$parent,id=>'text100');
		SBV::DRAW::mtext(['101',$v101],$cx1,$cy3+$r/4,parent=>$parent,id=>'text101');
		SBV::DRAW::mtext(['110',$v110],$cx3,$cy2+$r/2,parent=>$parent,id=>'text110');
		SBV::DRAW::mtext(['111',$v111],$cx3,$roy,parent=>$parent,id=>'text111');
	}
	else
	{
		$parent->text(x=>$cx3,y=>$cy3-$r/2,id=>"text001")->cdata($v001);
		#SBV::DRAW::text($v001,$cx3,$cy3-$r/2,parent=>$parent,id=>'text001');
		SBV::DRAW::text($v010,$cx2+$r/2,$cy2,yalign=>"top",parent=>$parent,id=>'text010');
		SBV::DRAW::text($v011,$cx2,$cy3+$r/4,parent=>$parent,id=>'text011');
		SBV::DRAW::text($v100,$cx1-$r/2,$cy2,yalign=>"top",parent=>$parent,id=>'text100');
		SBV::DRAW::text($v101,$cx1,$cy3+$r/4,parent=>$parent,id=>'text101');
		SBV::DRAW::text($v110,$cx3,$cy2+$r/2,parent=>$parent,id=>'text110');
		SBV::DRAW::text($v111,$cx3,$roy,parent=>$parent,id=>'text111');
	}
}

#-------------------------------------------------------------------------------
#  venn graph for 4 samples
#-------------------------------------------------------------------------------
# this is discard , the coordinate is too hard to calculate
sub _venn4_discard
{
	my ($venn,$conf,$parent) = @_;

	my @names = $venn->names;
	
	my $hi = $SBV::conf->{hspace};
	my $vi = $SBV::conf->{vspace};

	my $ox = $conf->{ox};
	my $oy = $conf->{oy};
	my $w = $conf->{tw};
	my $h = $conf->{th};
	
	my $label_font = SBV::Font->fetch_font("CLASSlabel");
	my $labelH = $label_font->fetch_text_height;
	
	# the styles of ellipse or cirlce
	my @styles = SBV::CONF::fetch_venn_style($conf,4);
	
	my $hry = ($h - $labelH - $vi)/2;
	my $wry = $w/3;
	my $ry = $hry < $wry ? $hry : $wry;
	my $rx = $ry/$SQRT3;
	$rx = nearest 0.001 , $rx;
	$ry = nearest 0.001 , $ry;

	my $cx = $ox+$w/2;
	my $cy = $oy-$h/2;
	
	my $dx = nearest 0.001 , $rx;
	my $dy = nearest 0.001 , $rx/3;
	my $angle = 60;
	
	# the main graph
	$SBV::defs->ellipse(cx=>$cx,cy=>$cy,rx=>$rx,ry=>$ry,id=>"ellipse");
	my $venn4 = $SBV::defs->group(id=>"ellipses");
	$venn4->use("-href"=>"#ellipse",transform=>"rotate($angle,$cx,$cy)",style=>$styles[0]);#C
	$venn4->use("-href"=>"#ellipse",transform=>"rotate(-$angle,$cx,$cy)",style=>$styles[1]);#B
	$venn4->use("-href"=>"#ellipse",transform=>"translate($dx,$dy) rotate($angle,$cx,$cy)",style=>$styles[2]);#D
	$venn4->use("-href"=>"#ellipse",transform=>"translate(-$dx,$dy) rotate(-$angle,$cx,$cy)",style=>$styles[3]);#A
	$parent->use("-href"=>"#ellipses");

	# label
	my $ypos = $cy-$ry-$vi;
	my $y2 = 0 - sqrt(3*($rx**2)+$ry**2)/2 - $vi;

	my ($name1,$name2,$name3,$name4) = @names;
	my $label1 = SBV::DRAW::text($name1,$cx,$ypos,class=>"label",yalign=>"bottom",parent=>$parent);
	$label1->setAttribute("transform","translate(-$dx,$dy) rotate(-$angle,$cx,$cy)");
	
	my $label2 = SBV::DRAW::text($name2,-$rx,$y2,class=>"label",yalign=>"bottom",xalign=>"left",parent=>$parent);
	$label2->setAttribute("transform","translate($cx,$cy)");
	
	my $label3 = SBV::DRAW::text($name3,$rx,$y2,class=>"label",yalign=>"bottom",xalign=>"right",parent=>$parent);
	$label3->setAttribute("transform","translate($cx,$cy)");

	my $label4 = SBV::DRAW::text($name4,$cx,$ypos,class=>"label",yalign=>"bottom",parent=>$parent);
	$label4->setAttribute("transform","translate($dx,$dy) rotate($angle,$cx,$cy)");
}

sub _venn4_back
{
	my ($venn,$conf,$parent) = @_;

	my @names = $venn->names;
	
	my $hi = $SBV::conf->{hspace};
	my $vi = $SBV::conf->{vspace};

	my $ox = $conf->{ox};
	my $oy = $conf->{oy};
	my $w = $conf->{tw};
	my $h = $conf->{th};
	
	my $label_font = SBV::Font->fetch_font("CLASSlabel");
	my $labelH = $label_font->fetch_text_height;
	
	# the styles of ellipse or cirlce
	my @styles = SBV::CONF::fetch_venn_style($conf,4);
	
	# set the symbol 
	my $symbol_id = "symbol" . $SBV::idnum; $SBV::idnum++;
	my $symbol = $SBV::defs->symbol(id=>"$symbol_id",viewBox=>"0 0 1100 600");
	
	my $cx = 550; 
	my $cy = 300;
	my $rx = 180;
	my $ry = 310;
	my $dx = $rx;
	my $dy = $rx/3;
	my $angle = 60;

	my $ellipse_id = "ellipse" . $SBV::idnum;
	$SBV::idnum ++;
	$SBV::defs->ellipse(cx=>$cx,cy=>$cy,rx=>$rx,ry=>$ry,id=>"$ellipse_id");
	
	my $ellipses_id = "ellipses" . $SBV::idnum;
	$SBV::idnum ++;
	
	my $venn4 = $SBV::defs->group(id=>"$ellipses_id");
	
	# main graph
	$venn4->use("-href"=>"#$ellipse_id",transform=>"rotate($angle,$cx,$cy)",style=>$styles[0]);#C
	$venn4->use("-href"=>"#$ellipse_id",transform=>"rotate(-$angle,$cx,$cy)",style=>$styles[1]);#B
	$venn4->use("-href"=>"#$ellipse_id",transform=>"translate($dx,$dy) rotate($angle,$cx,$cy)",style=>$styles[2]);#D
	$venn4->use("-href"=>"#$ellipse_id",transform=>"translate(-$dx,$dy) rotate(-$angle,$cx,$cy)",style=>$styles[3]);#A
	
	@styles = map {"fill:none;stroke=>#000;"} @styles;
	$venn4->use("-href"=>"#$ellipse_id",transform=>"rotate($angle,$cx,$cy)",style=>$styles[0]);#C
	$venn4->use("-href"=>"#$ellipse_id",transform=>"rotate(-$angle,$cx,$cy)",style=>$styles[1]);#B
	$venn4->use("-href"=>"#$ellipse_id",transform=>"translate($dx,$dy) rotate($angle,$cx,$cy)",style=>$styles[2]);#D
	$venn4->use("-href"=>"#$ellipse_id",transform=>"translate(-$dx,$dy) rotate(-$angle,$cx,$cy)",style=>$styles[3]);#A

	# label 
	if ($conf->{show_label})
	{
		my @tx = (230,410,675,875);
		my @ty = (464,525,525,464);
		@ty = map {600-$_} @ty;

		for my$i(0 .. $#names)
		{
			SBV::DRAW::text($names[$i],$tx[$i],$ty[$i],class=>"label",yalign=>"bottom",parent=>$venn4);
		}
	}

	# venn stat result
	my @tag = (
"1000","0100","0010","0001", # A,B,C,D
"1100","0110","0011", #AB,BC,CD,
"1110","1111","0111",#ABC,ABCD,BCD
"1010","1011","1101","0101",#AC,ACD,ABD,BD
"1001"#AD
);
	my @tx = (200,400,690,890,320,550,780,410,550,690,345,480,620,755,550);
	my @ty = (320,470,470,320,400,420,400,300,200,300,160,105,105,160,60);
	@ty = map {600-$_} @ty;

	foreach my$i(0 .. $#tag)
	{	
		my $tag = $tag[$i];
		my $res = $venn->{stat}->{"$tag"};
		my $tx = $tx[$i];
		my $ty = $ty[$i];

		if ($conf->{show_logical_label})
		{
			SBV::DRAW::mtext(["$tag",$res],$tx,$ty,parent=>$venn4,id=>"text".$tag);	
		}
		else
		{
			SBV::DRAW::text($res,$tx,$ty,parent=>$venn4,id=>"text".$tag);
		}
	}
	
	$symbol->use("-href"=>"#$ellipses_id");
	$parent->use(x=>$ox,y=>$oy-$h,height=>$h,width=>$w,'-href'=>"#$symbol_id");
}

sub _venn4
{
	my ($venn,$conf,$parent) = @_;

	my @names = $venn->names;
	
	my $hi = $SBV::conf->{hspace};
	my $vi = $SBV::conf->{vspace};

	my $ox = $conf->{ox};
	my $oy = $conf->{oy};
	my $w = $conf->{tw};
	my $h = $conf->{th};
	
	my $label_font = SBV::Font->fetch_font("CLASSlabel");
	my $labelH = $label_font->fetch_text_height;
	
	my $root = $SBV::svg->getElementByID("sbv1");
	$root->setAttribute("viewBox","0 0 1100 600");

	# the styles of ellipse or cirlce
	my @styles = SBV::CONF::fetch_venn_style($conf,4);
	
	my $cx = 550; 
	my $cy = 300;
	my $rx = 180;
	my $ry = 310;
	my $dx = $rx;
	my $dy = $rx/3;
	my $angle = 60;

	# main graph
	$parent->ellipse(cx=>$cx,cy=>$cy,rx=>$rx,ry=>$ry,transform=>"rotate($angle,$cx,$cy)",style=>$styles[0],id=>"set3");#C
	$parent->ellipse(cx=>$cx,cy=>$cy,rx=>$rx,ry=>$ry,transform=>"rotate(-$angle,$cx,$cy)",style=>$styles[1],id=>"set2");#B
	$parent->ellipse(cx=>$cx,cy=>$cy,rx=>$rx,ry=>$ry,transform=>"translate($dx,$dy) rotate($angle,$cx,$cy)",style=>$styles[2],id=>"set4");#D
	$parent->ellipse(cx=>$cx,cy=>$cy,rx=>$rx,ry=>$ry,transform=>"translate(-$dx,$dy) rotate(-$angle,$cx,$cy)",style=>$styles[3],id=>"set1");#A
	
	@styles = map {"fill:none;stroke=>#000;"} @styles;
	$parent->ellipse(cx=>$cx,cy=>$cy,rx=>$rx,ry=>$ry,transform=>"rotate($angle,$cx,$cy)",style=>$styles[0]);#C
	$parent->ellipse(cx=>$cx,cy=>$cy,rx=>$rx,ry=>$ry,transform=>"rotate(-$angle,$cx,$cy)",style=>$styles[1]);#B
	$parent->ellipse(cx=>$cx,cy=>$cy,rx=>$rx,ry=>$ry,transform=>"translate($dx,$dy) rotate($angle,$cx,$cy)",style=>$styles[2]);#D
	$parent->ellipse(cx=>$cx,cy=>$cy,rx=>$rx,ry=>$ry,transform=>"translate(-$dx,$dy) rotate(-$angle,$cx,$cy)",style=>$styles[3]);#A

	# label 
	if ($conf->{show_label})
	{
		my @tx = (230,410,675,875);
		my @ty = (464,525,525,464);
		@ty = map {600-$_} @ty;

		for my$i(0 .. $#names)
		{
			SBV::DRAW::text($names[$i],$tx[$i],$ty[$i],class=>"label",yalign=>"bottom",parent=>$parent,id=>"label$i");
		}
	}

	# venn stat result
	my @tag = (
"1000","0100","0010","0001", # A,B,C,D
"1100","0110","0011", #AB,BC,CD,
"1110","1111","0111",#ABC,ABCD,BCD
"1010","1011","1101","0101",#AC,ACD,ABD,BD
"1001"#AD
);
	my @tx = (200,400,690,890,320,550,780,410,550,690,345,480,620,755,550);
	my @ty = (320,470,470,320,400,420,400,300,200,300,160,105,105,160,60);
	@ty = map {600-$_} @ty;

	foreach my$i(0 .. $#tag)
	{	
		my $tag = $tag[$i];
		my $res = $venn->{stat}->{"$tag"};
		my $tx = $tx[$i];
		my $ty = $ty[$i];

		if ($conf->{show_logical_label})
		{
			SBV::DRAW::mtext(["$tag",$res],$tx,$ty,parent=>$parent,id=>"text".$tag);
		}
		else
		{
			SBV::DRAW::text($res,$tx,$ty,parent=>$parent,id=>"text".$tag);
		}
	}
}

#-------------------------------------------------------------------------------
#  venn graph for 5 samples
#-------------------------------------------------------------------------------
sub _venn5_Branko
{
	my ($venn,$conf,$parent) = @_;

	my @names = $venn->names;
	
	my $hi = $SBV::conf->{hspace};
	my $vi = $SBV::conf->{vspace};

	my $ox = $conf->{ox};
	my $oy = $conf->{oy};
	my $w = $conf->{tw};
	my $h = $conf->{th};
	
	my $label_font = SBV::Font->fetch_font("CLASSlabel");
	my $labelH = $label_font->fetch_text_height;
	
	my $root = $SBV::svg->getElementByID("sbv1");
	$root->setAttribute("viewBox","-382 -408 786 782");

	# the styles of ellipse or cirlce
	my (@styles) = SBV::CONF::fetch_venn_style($conf,5);
	
	# main graph
	$parent->ellipse(cx=>36,cy=>-56,rx=>160,ry=>320,style=>$styles[0],id=>"set1");
	$parent->ellipse(cx=>36,cy=>-56,rx=>160,ry=>320,transform=>"rotate(72)",style=>$styles[1],id=>"set2");
	$parent->ellipse(cx=>36,cy=>-56,rx=>160,ry=>320,transform=>"rotate(144)",style=>$styles[2],id=>"set3");
	$parent->ellipse(cx=>36,cy=>-56,rx=>160,ry=>320,transform=>"rotate(216)",style=>$styles[3],id=>"set4");
	$parent->ellipse(cx=>36,cy=>-56,rx=>160,ry=>320,transform=>"rotate(288)",style=>$styles[4],id=>"set5");

	@styles = map {"fill:none;stroke=>#000;"} @styles;
	$parent->ellipse(cx=>36,cy=>-56,rx=>160,ry=>320,style=>$styles[0]);
	$parent->ellipse(cx=>36,cy=>-56,rx=>160,ry=>320,transform=>"rotate(72)",style=>$styles[1]);
	$parent->ellipse(cx=>36,cy=>-56,rx=>160,ry=>320,transform=>"rotate(144)",style=>$styles[2]);
	$parent->ellipse(cx=>36,cy=>-56,rx=>160,ry=>320,transform=>"rotate(216)",style=>$styles[3]);
	$parent->ellipse(cx=>36,cy=>-56,rx=>160,ry=>320,transform=>"rotate(288)",style=>$styles[4]);
	
	# label 
	if ($conf->{show_label})
	{
		my $dx = 36;
		my $dy = -56 - 320 - $vi;
		my ($name1,$name2,$name3,$name4,$name5) = @names;
		my $label1 = SBV::DRAW::text($name1,$dx,$dy,class=>"label",yalign=>"bottom",parent=>$parent,id=>"label1");
		my $label2 = SBV::DRAW::text($name2,$dx,$dy,class=>"label",yalign=>"bottom",parent=>$parent,id=>"label2");
		my $label3 = SBV::DRAW::text($name3,$dx,$dy,class=>"label",yalign=>"bottom",parent=>$parent,id=>"label3");
		my $label4 = SBV::DRAW::text($name4,$dx,$dy,class=>"label",yalign=>"bottom",parent=>$parent,id=>"label4");
		my $label5 = SBV::DRAW::text($name5,$dx,$dy,class=>"label",yalign=>"bottom",parent=>$parent,id=>"label5");
		$label2->setAttribute("transform","rotate(72)");
		$label3->setAttribute("transform","rotate(144)");
		$label4->setAttribute("transform","rotate(216)");
		$label5->setAttribute("transform","rotate(288)");
	}

	# venn stat result
	my @tag = (
"10000","01000","00100","00010","00001","11000","10100","10010","10001","01100",
"01010","01001","00110","00101","00011","11100","11010","11001","10110","10101",
"10011","01110","01101","01011","00111","11110","11101","11011","10111","01111",
"11111"
);
	my @tx = (
30,300,160,-220,-280,180,40,100,-80,190,-190,230,-60,-170,-222,
90,148,170,-33,-93,20,-120,190,-211,-150,-30,140,120,-60,-160,0
);
	my @ty = (
-300,-60,280,220,-130,-130,230,-200,-215,125,120,40,220,-150,0,
150,-153,-20,208,-193,-180,120,100,32,-80,160,80,-100,-140,20,0
);
	
	foreach my$i(0 .. $#tag)
	{	
		my $tag = $tag[$i];
		my $res = $venn->{stat}->{"$tag"};
		my $tx = $tx[$i];
		my $ty = $ty[$i];

		if ($conf->{show_logical_label})
		{
			SBV::DRAW::mtext(["$tag",$res],$tx,$ty,parent=>$parent,id=>"text".$tag);	
		}
		else
		{
			SBV::DRAW::text($res,$tx,$ty,parent=>$parent,id=>"text".$tag);
		}
	}
}

sub _venn5 
{
	my ($venn,$conf,$parent) = @_;
	if ($conf->{model} =~ /^branko$/i || $conf->{model} =~ /^ellipse$/i)
	{
		_venn5_Branko($venn,$conf,$parent);
		return;
	}

	my @names = $venn->names;
	
	my $hi = $SBV::conf->{hspace};
	my $vi = $SBV::conf->{vspace};

	my $ox = $conf->{ox};
	my $oy = $conf->{oy};
	my $w = $conf->{tw};
	my $h = $conf->{th};
	
	my $label_font = SBV::Font->fetch_font("CLASSlabel");
	my $labelH = $label_font->fetch_text_height;
	
	my $root = $SBV::svg->getElementByID("sbv1");
	$root->setAttribute("viewBox","100 80 660 500");

	# the styles of ellipse or cirlce
	my (@styles) = SBV::CONF::fetch_venn_style($conf,5);
	
	# main graph
	my $pathd = "M240 350 A110 75 0 0 1 343.463319293926 275.319936777872 L430 260 A160 140 0 1 1 430 440 L343.463319293926 424.680063222128 A110 75 0 0 1 240 350";
	$parent->path(d=>$pathd,style=>$styles[0],id=>"set2");
	$parent->path(d=>$pathd,style=>$styles[1],transform=>"rotate(72,420,320)",id=>"set3");
	$parent->path(d=>$pathd,style=>$styles[2],transform=>"rotate(144,420,320)",id=>"set4");
	$parent->path(d=>$pathd,style=>$styles[3],transform=>"rotate(216,420,320)",id=>"set5");
	$parent->path(d=>$pathd,style=>$styles[4],transform=>"rotate(288,420,320)",id=>"set1");

	@styles = map {"fill:none;stroke=>#000;"} @styles;
	$parent->path(d=>$pathd,style=>$styles[0]);
	$parent->path(d=>$pathd,style=>$styles[1],transform=>"rotate(72,420,320)");
	$parent->path(d=>$pathd,style=>$styles[2],transform=>"rotate(144,420,320)");
	$parent->path(d=>$pathd,style=>$styles[3],transform=>"rotate(216,420,320)");
	$parent->path(d=>$pathd,style=>$styles[4],transform=>"rotate(288,420,320)");
	
	# label 
	if ($conf->{show_label})
	{
		my ($name1,$name2,$name3,$name4,$name5) = @names;
		my $text1x = 500 - $label_font->fetch_text_width($name1)/2;
		my $text2x = 680 - $label_font->fetch_text_width($name2)/2;
		my $text3x = 440 - $label_font->fetch_text_width($name3)/2;
		my $text4x = 300 - $label_font->fetch_text_width($name4);
		my $text5x = 300 - $label_font->fetch_text_width($name5)/2;
		$parent->text(x=>$text1x,y=>40, class=>"label",id=>"label1")->cdata($name1);
		$parent->text(x=>$text2x,y=>460,class=>"label",transform=>"rotate(-45,680,460)",id=>"label2")->cdata($name2);
		$parent->text(x=>$text3x,y=>630,class=>"label",id=>"label3")->cdata($name3);
		$parent->text(x=>$text4x,y=>540,class=>"label",id=>"label4")->cdata($name4);
		$parent->text(x=>$text5x,y=>65, class=>"label",id=>"label5")->cdata($name5);
		
	}

	# venn stat result
	my @tag = (
"10000","01000","00100","00010","00001",
"11111","11011","11101","11110","01111",
"10111","10010","11000","01001","01100",
"10100","00110","01010","00011","00101",
"10001","11010","11001","01101","11100",
"10110","01110","01011","00111","10101",
"10011"
#"11000","10100","10010","10001","01100",
#"01010","01001","00110","00101","00011",
#"11100","11010","11001","10110","10101",
#"10011","01110","01101","01011","00111",
#"11110","11101","11011","10111","01111",
#"11111"
);
	my @tx = (
520,640,450,220,260,
425,493,485,395,330,
393,513,573,569,533,
433,325,277,255,325,
405,531,538,534,462,
382,328,282,320,375,
455
);
	my @ty = (
100,350,540,410,170,
320,270,373,398,315,
227,193,250,360,453,
470,460,373,268,195,
145,235,308,393,428,
450,393,317,252,187,
200
);
	
	foreach my$i(0 .. $#tag)
	{	
		my $tag = $tag[$i];
		my $res = $venn->{stat}->{"$tag"};
		my $tx = $tx[$i];
		my $ty = $ty[$i];

		if ($conf->{show_logical_label})
		{
			SBV::DRAW::mtext(["$tag",$res],$tx,$ty,parent=>$parent,id=>"text".$tag);	
		}
		else
		{
			SBV::DRAW::text($res,$tx,$ty,parent=>$parent,id=>"text".$tag);
		}
	}
	
}

sub _venn5_back
{
	my ($venn,$conf,$parent) = @_;

	my @names = $venn->names;
	
	my $hi = $SBV::conf->{hspace};
	my $vi = $SBV::conf->{vspace};

	my $ox = $conf->{ox};
	my $oy = $conf->{oy};
	my $w = $conf->{tw};
	my $h = $conf->{th};
	
	my $label_font = SBV::Font->fetch_font("CLASSlabel");
	my $labelH = $label_font->fetch_text_height;

	# the styles of ellipse or cirlce
	my (@styles) = SBV::CONF::fetch_venn_style($conf,5);
	
	my $symbol_id = "symbol" . $SBV::idnum; $SBV::idnum++;
	my $symbol = $SBV::defs->symbol(id=>"$symbol_id",viewBox=>"-382 -408 786 782");
	
	my $ellipse_id = "ellipse" . $SBV::idnum;
	$SBV::idnum ++;
	$SBV::defs->ellipse(cx=>36,cy=>-56,rx=>160,ry=>320,id=>"$ellipse_id");
	
	my $ellipses_id = "ellipses" . $SBV::idnum;
	$SBV::idnum ++;
	
	my $venn5 = $SBV::defs->group(id=>"$ellipses_id");
	
	# main graph
	$venn5->use('-href'=>"#$ellipse_id",style=>$styles[0]);
	$venn5->use('-href'=>"#$ellipse_id",transform=>"rotate(72)",style=>$styles[1]);
	$venn5->use('-href'=>"#$ellipse_id",transform=>"rotate(144)",style=>$styles[2]);
	$venn5->use('-href'=>"#$ellipse_id",transform=>"rotate(216)",style=>$styles[3]);
	$venn5->use('-href'=>"#$ellipse_id",transform=>"rotate(288)",style=>$styles[4]);

	@styles = map {"fill:none;stroke=>#000;"} @styles;
	$venn5->use('-href'=>"#$ellipse_id",style=>$styles[0]);
	$venn5->use('-href'=>"#$ellipse_id",transform=>"rotate(72)",style=>$styles[1]);
	$venn5->use('-href'=>"#$ellipse_id",transform=>"rotate(144)",style=>$styles[2]);
	$venn5->use('-href'=>"#$ellipse_id",transform=>"rotate(216)",style=>$styles[3]);
	$venn5->use('-href'=>"#$ellipse_id",transform=>"rotate(288)",style=>$styles[4]);
	
	# label 
	if ($conf->{show_label})
	{
		my $dx = 36;
		my $dy = -56 - 320 - $vi;
		my ($name1,$name2,$name3,$name4,$name5) = @names;
		my $label1 = SBV::DRAW::text($name1,$dx,$dy,class=>"label",yalign=>"bottom",parent=>$venn5);
		my $label2 = SBV::DRAW::text($name2,$dx,$dy,class=>"label",yalign=>"bottom",parent=>$venn5);
		my $label3 = SBV::DRAW::text($name3,$dx,$dy,class=>"label",yalign=>"bottom",parent=>$venn5);
		my $label4 = SBV::DRAW::text($name4,$dx,$dy,class=>"label",yalign=>"bottom",parent=>$venn5);
		my $label5 = SBV::DRAW::text($name5,$dx,$dy,class=>"label",yalign=>"bottom",parent=>$venn5);
		$label2->setAttribute("transform","rotate(72)");
		$label3->setAttribute("transform","rotate(144)");
		$label4->setAttribute("transform","rotate(216)");
		$label5->setAttribute("transform","rotate(288)");
	}

	# venn stat result
	my @tag = (
"10000","01000","00100","00010","00001","11000","10100","10010","10001","01100",
"01010","01001","00110","00101","00011","11100","11010","11001","10110","10101",
"10011","01110","01101","01011","00111","11110","11101","11011","10111","01111",
"11111"
);
	my @tx = (
30,300,160,-220,-280,180,40,100,-80,190,-190,230,-60,-170,-222,
90,148,170,-33,-93,20,-120,190,-211,-150,-30,140,120,-60,-160,0
);
	my @ty = (
-300,-60,280,220,-130,-130,230,-200,-215,125,120,40,220,-150,0,
150,-153,-20,208,-193,-180,120,100,32,-80,160,80,-100,-140,20,0
);
	
	foreach my$i(0 .. $#tag)
	{	
		my $tag = $tag[$i];
		my $res = $venn->{stat}->{"$tag"};
		my $tx = $tx[$i];
		my $ty = $ty[$i];

		if ($conf->{show_logical_label})
		{
			SBV::DRAW::mtext(["$tag",$res],$tx,$ty,parent=>$venn5,id=>"text".$tag);	
		}
		else
		{
			SBV::DRAW::text($res,$tx,$ty,parent=>$venn5,id=>"text".$tag);
		}
	}

	$symbol->use("-href"=>"#$ellipses_id");
	$parent->use(x=>$ox,y=>$oy-$h,height=>$h,width=>$w,'-href'=>"#$symbol_id");
}

# draw a fig like sunflower
# for venn diagram which > 5 sets 
sub _venn_more
{
	my ($venn,$conf,$parent) = @_;

	my @names = $venn->names;
	
	my $hi = $SBV::conf->{hspace};
	my $vi = $SBV::conf->{vspace};

	my $ox = $conf->{ox};
	my $oy = $conf->{oy};
	my $w = $conf->{tw};
	my $h = $conf->{th};
	
	my $cx = $ox + $w/2;
	my $cy = $oy - $h/2;

	my $label_font = SBV::Font->fetch_font("CLASSlabel");
	my $labelH = $label_font->fetch_text_height;
	my $font = SBV::Font->fetch_font();

	my $min_size = $w < $h ? $w : $h;
	my $ry = ($min_size - 2*$labelH - 4*$vi)/4;
	my $rx = $ry * 1/2;
	my $r  = $ry * 1/3;
	
	$ry *= $conf->{ry};
	$rx *= $conf->{rx};
	$r  *= $conf->{circle_radius};

	my $root = $SBV::svg->getElementByID("sbv1");

	# the styles of ellipse or cirlce
	my $num = scalar @names;
	my @styles = SBV::CONF::fetch_venn_style($conf,$num);
	my $unit_angle = 360 / $num;

	# draw ellipses
	for my $i (0 .. $num-1)
	{
		my @logic = map { 0 } 1 .. $num;
		$logic[$i] = 1;
		my $logic = join "" , @logic;
		my $val = $venn->{stat}->{$logic};

		my $angle = $unit_angle * $i;
		my $ecy = $cy - $ry + $conf->{offset};
		
		$parent->ellipse(cx=>$cx,cy=>$ecy,rx=>$rx,ry=>$ry,style=>$styles[$i],id=>"ellipse_$logic",transform=>"rotate($angle,$cx,$cy)");

		# draw label_
		my $label_r = $ry*2 - $conf->{offset} + $vi;
		
		my ($textx,$texty) = fetch_text_loci($cx,$cy,$label_r,$angle,$label_font,$names[$i]);
		$parent->text(x=>$textx,y=>$texty,class=>"label",id=>"label_$logic")->cdata($names[$i]);

		# draw val
		my $val_r = $ry + $ry/2;
		($textx,$texty) = fetch_text_loci($cx,$cy,$val_r,$angle,$font,$val);
		$parent->text(x=>$textx,y=>$texty,id=>"val_$logic")->cdata($val);
	}

	my $stroke_color = $conf->{stroke_color} ? SBV::Colors::fetch_color($conf->{stroke_color}) : "#000";
	if ($conf->{stroke_width})
	{
		# reset the styles for stroke 
		@styles = map {"fill:none;stroke=>$stroke_color;stroke-width:$conf->{stroke_width}"} @styles;
		
		for my $i (0 .. $num-1)
		{
			my $angle = $unit_angle * $i;
			my $ecy = $cy - $ry/2 + $conf->{offset};
			print "$styles[$i]\n";
			$parent->ellipse(cx=>$cx,cy=>$ecy,rx=>$rx,ry=>$ry,style=>$styles[$i],transform=>"rotate($angle,$cx,$cy)");
		}
	}
	
	# draw the center circle
	my $circle_color = SBV::Colors::fetch_color($conf->{circle_color});
	my $circle_style = "stroke:$stroke_color;stroke-width:$conf->{stroke_width};fill:$circle_color;fill-opacity:1";
	$parent->circle(cx=>$cx,cy=>$cy,r=>$r,style=>$circle_style);

	if ($conf->{show_core_val})
	{
		my $logic = '1' x $num;
		my $val = $venn->{stat}->{$logic};
		my $font_height = $font->fetch_text_height;
		my $font_width  = $font->fetch_text_width($val);
		$parent->text(x=>$cx-$font_width/2,y=>$cy+$font_height/2)->cdata($val);
	}
}

sub fetch_text_loci
{
	my ($cx,$cy,$r,$angle,$font,$label) = @_;

	my $font_height = $font->fetch_text_height;
	my $font_width  = $font->fetch_text_width($label);
	
	my $textx = sprintf "%.2f" , $cx + sin($angle*$TWOPI/360)*$r;
	my $texty = sprintf "%.2f" , $cy - cos($angle*$TWOPI/360)*$r;

	if ($angle == 0)
	{
		$textx -= $font_width/2;
	}
	elsif ($angle == 90)
	{
		$texty += $font_height/2;
	}
	elsif ($angle == 180)
	{
		$textx -= $font_width/2;
		$texty += $font_height;
	}
	elsif ($angle == 270)
	{
		$textx -= $font_width;
		$texty += $font_height/2;
	}
	elsif ($angle > 90 && $angle < 180)
	{
		$texty += $font_height;
	}
	elsif ($angle > 180 && $angle < 270)
	{
		$texty += $font_height;
		$textx -= $font_width;
	}
	elsif ($angle > 270 && $angle < 360)
	{
		$textx -= $font_width;
	}

	return ($textx,$texty);
}
