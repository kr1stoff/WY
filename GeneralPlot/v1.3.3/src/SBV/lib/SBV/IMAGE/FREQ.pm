package SBV::IMAGE::FREQ;
#------------------------------------------------+
#    [APM] This moudle is generated by amp.pl    |
#    [APM] Created time: 2013-11-14 13:51:30     |
#------------------------------------------------+
=pod

=head1 Name

SBV::IMAGE::FREQ

=head1 Synopsis

This module is not meant to be used directly

=head1 Feedback

Author: Peng Ai
Email:  aipeng0520@163.com

=head1 Version

Version history

=head2 v1.0

Date: 2013-11-14 13:51:30

=cut

use strict;
use warnings;
require Exporter;

use FindBin;
use lib "$FindBin::RealBin";
use lib "$FindBin::RealBin/lib";
use lib "$FindBin::RealBin/../";
use lib "$FindBin::RealBin/../lib";

sub new 
{
	my ($class,$file,$conf) = @_;
	
	my $freq = {};
	$freq->{data} = _load_data_file($file,$conf);
	$freq->{conf} = $conf;
	
	bless $freq , $class;
	return $freq;
}

sub _load_data_file
{
	my ($file,$conf) = @_;
	my $data = [];
	
	my $format = $conf->{format} || "plain";
	my @seqs;
	
	open my$fh , $file or die "can't open file $!";
	# plain
	if ($format eq "plain")
	{
		while(<$fh>)
		{
			chomp;
			next if (/^#/);
			next if ($_ eq "");
			push @seqs , uc $_;
		}
	}
	elsif ($format eq "fasta")
	{
		$/ = ">";
		while(<$fh>)
		{
			chomp;
			next if ($_ eq "");
			my ($name,$seq) = split /\n+/ , $_ , 2;
			$seq =~ s/[\n\r]//g;
			push @seqs , uc $seq;
		}
		$/ = "\n";
	}
	close $fh;

	# parse the frequency
	my $seqlen = length $seqs[0];
	my $num = scalar @seqs;
	foreach my$seq(@seqs)
	{
		my $len = length $seq;
		ERROR('seq_align_err') if ($len != $seqlen);

		my @bases = split // , $seq;
		for my$i(0 .. $#bases)
		{
			$data->[$i]->{$bases[$i]} ++;
		}
	}
	
	$conf->{type} = "dna" unless $conf->{type};
	my $order = $conf->{type} eq "protein" ? "FLYCWPHQIMTNKSRVADEG" : "ATCG";
	my @order = split // , $order;
	
	open OUT,">","temp.dat" or die;
	my $sta = $conf->{start} || 0;
	my $end = $conf->{end} || ($seqlen-1) ;
	for my$i ( $sta .. $end )
	{
		my $index = $i + 1;
		foreach my$base(@order)
		{
			my $val = exists $data->[$i]->{$base} ? $data->[$i]->{$base}/$num : 0;
			print OUT "$index\t$val\t$base\n";
		}
	}
	close OUT;
		
	$data = SBV::DATA::Frame->new("temp.dat");
	system("rm -f temp.dat");
	return $data;
}

