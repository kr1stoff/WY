package SBV::IMAGE::ALIGN;
#------------------------------------------------+
#    [APM] This moudle is generated by amp.pl    |
#    [APM] Created time: 2013-08-30 10:49:29     |
#------------------------------------------------+
=pod

=head1 Name

SBV::IMAGE::ALIGN

=head1 Synopsis

This module is not meant to be used directly

=head1 Feedback

Author: Peng Ai
Email:  aipeng0520@163.com

=head1 Version

Version history

=head2 v1.0

Date: 2013-08-30 10:49:29

=cut


use strict;
use warnings;
require Exporter;

use FindBin;
use lib "$FindBin::RealBin";
use lib "$FindBin::RealBin/lib";
use lib "$FindBin::RealBin/..";
use lib "$FindBin::RealBin/../lib";

use SBV;
use SBV::STAT;
use SBV::STONE::AXIS;

sub new 
{
	my ($class,$data) = @_;

	my $align = {};
	$align = $data;
	bless $align , $class;
	
	return $align;
}

sub coverage
{
	my $self = shift;
	
}

sub length
{
	my ($self,$name) = @_;
	return $self->{length}->{$name};
}

sub names
{
	my ($self,$name) = @_;
	my @names =sort keys %{$self->{align}->{$name}};
	return @names;
}

sub lasv
{
	my ($self,$name,$conf,$parent) = @_;
	
	my $graph = $conf->{graph} || "full";
	my %func = (simple=>\&_lasv_simple,full=>\&_lasv_full,detail=>\&_lasv_detail);
	&{$func{$graph}}($self,$name,$conf,$parent);
}

sub _lasv_simple
{
	my ($self,$name,$conf,$parent) = @_;
	
	my $sumLen = $self->length($name);
	my @names = $self->names($name);
	push @names , $name;
	push @names , 'identity';

	my $vi = $SBV::conf->{vspace};
	my $hi = $SBV::conf->{hspace};

	my $font = SBV::Font->fetch_font();
	my $textH = $font->fetch_text_height;
	my $leftW = $font->fetch_max_text_width(\@names);

	my $scale = dividing(1,$sumLen,-xtrue=>1);
	my %par = (parent=>$parent,side=>'left',tick=>$scale,start=>0,translate=>0);
	my $axis = SBV::STONE::AXIS->new(%par);
	my $thick = $axis->thickness;
	my $ox = $conf->{ox} + $hi + $leftW;
	my $oy = $conf->{oty} + $thick;
	my $length = $conf->{tw} - $hi - $leftW;
	$axis->aes(ox=>$ox,oy=>$oy,length=>$length);
	$axis->plot;
	
	# change the y coord
	my $y = $oy;
	
	# draw the target seq bar and name
	my $barH = 20;
	my $barW = $axis->fetch_dis($sumLen);
	$parent->rect(x=>$ox,y=>$y,width=>$barW,height=>$barH,style=>"fill:#f00");
	$y += $barH;
	my $textX = $ox - $hi - $font->fetch_text_width($name);
	$parent->text(x=>$textX,y=>$y)->cdata($name);

	pop @names;
	pop @names;
	$y += $barH + 2*$vi;
	
	# draw align search result
	foreach my$sub_name(@names)
	{
		my @align = @{$self->{align}->{$name}->{$sub_name}};
		
		$parent->line(x1=>$ox,x2=>$ox+$length,y1=>$y+$textH/2,y2=>$y+$textH/2);
		foreach (@align)
		{
			my ($sta1,$end1,$sta2,$end2,$iden) = @$_;
			my $strand1 = $sta1 > $end1 ? -1 : 1;
			my $strand2 = $sta2 > $end2 ? -1 : 1;

			($sta1,$end1) = ($end1,$sta1) if (-1 == $strand1);
			($sta2,$end2) = ($end2,$sta2) if (-1 == $strand2);
			
			my $sta1_coord = $ox + $axis->fetch_dis($sta1);
			my $end1_coord = $ox + $axis->fetch_dis($end1);

			my $Rnum = int (255 * $iden / 100);
			my $color = SBV::Colors::fetch_color("$Rnum,0,0");
			SBV::DRAW::pencil($sta1_coord,$y,$end1_coord-$sta1_coord,$textH,
				style=>"fill:$color",parent=>$parent,strand=>$strand1*$strand2);
		}
		
		$y += $textH;
		$textX = $ox - $hi - $font->fetch_text_width($sub_name);
		$parent->text(x=>$textX,y=>$y)->cdata($sub_name);
		$y += $vi;
	}
	
	# draw color direction bar of identity
	$y += 2*$vi + $barH;
	my $fill = SBV::Colors::gradient(['#000','#f00']);
	$parent->rect(x=>$ox,y=>$y,width=>$length,height=>$barH,style=>"fill:$fill");
	$y += $barH;
	$textX = $ox - $font->fetch_text_width('identity') - $hi; 
	$parent->text(x=>$textX,y=>$y)->cdata("identity");

	my $color_axis = SBV::STONE::AXIS->new(%par);
	$color_axis->aes(tick=>"0 100 20",side=>"right",oy=>$y,ox=>$ox,length=>$length);
	$color_axis->plot;
	$y += $color_axis->thickness;

	# resize the SVG graph
	my $margin = SBV::CONF::fetch_margin($conf);
	$y += $margin->{bottom};
	$margin = SBV::CONF::fetch_margin();
	$y += $margin->{bottom};
	
	my $bg = $SBV::conf->{background} ? 1 : 0;
	SBV::DRAW::resize(height=>$y,bg=>$bg);
}

sub _lasv_full
{
	my ($self,$name,$conf,$parent) = @_;
}

sub _lasv_detail
{
	my ($self,$name,$conf,$parent) = @_;
	
	my @names = $self->names($name);
	push @names , $name;
	
	my @lengths = map {$self->length($_)} @names;
	my $sumLen = max(\@lengths);

	push @names , 'identity';

	my $vi = $SBV::conf->{vspace};
	my $hi = $SBV::conf->{hspace};

	my $font = SBV::Font->fetch_font();
	my $textH = $font->fetch_text_height;
	my $leftW = $font->fetch_max_text_width(\@names);
	
	# draw ticks 
	my $scale = dividing(1,$sumLen,-xtrue=>1);
	my %par = (parent=>$parent,side=>'left',tick=>$scale,bone=>1,translate=>0,start=>0,
		ox=>$conf->{ox} + $hi + $leftW,length=>$conf->{tw} - $hi - $leftW);
	my $axis = SBV::STONE::AXIS->new(%par);
	my $thick = $axis->thickness;
	$axis->aes(oy=>$conf->{oty}+$thick);
	$axis->plot;

	pop @names;
	pop @names;
	my $y = $axis->{oy} + $vi*2;

	# draw align search result
	my $unitH = 80;
	my $barH = 20;
	my $aim_len = $axis->fetch_dis($self->length($name));
	my $aim_textX = $par{ox} - $font->fetch_text_width($name) - $hi;
	my $bgcolor1 = SBV::Colors::fetch_color("40,200,200");
	my $bgcolor2 = SBV::Colors::fetch_color("gray");
	my $flag = 0;

	foreach my$sub_name(@names)
	{
		my @align = @{$self->{align}->{$name}->{$sub_name}};
		my $len = $axis->fetch_dis($self->length($sub_name));
		my $textX = $par{ox} - $font->fetch_text_width($sub_name) - $hi;

		# draw background for align search block
		my $bgcolor = 0 == $flag%2 ? $bgcolor1 : $bgcolor2;
		$flag ++;
		$parent->rect(x=>$conf->{ox},y=>$y,width=>$leftW,height=>$unitH,style=>"fill:$bgcolor;fill-opacity:0.3");
		$parent->rect(x=>$par{ox},y=>$y,width=>$axis->{length},height=>$unitH,style=>"fill:$bgcolor;fill-opacity:0.1");

		# draw query and subject line and name
		$parent->line(x1=>$par{ox},x2=>$aim_len+$par{ox},y1=>$y+$textH/2,y2=>$y+$textH/2);
		$parent->line(x1=>$par{ox},x2=>$len+$par{ox},y1=>$y+$unitH-$textH/2,y2=>$y+$unitH-$textH/2);
		$parent->text(x=>$aim_textX,y=>$y+$textH)->cdata($name);
		$parent->text(x=>$textX,y=>$y+$unitH)->cdata($sub_name);
		
		foreach (@align)
		{
			my ($sta1,$end1,$sta2,$end2,$iden) = @$_;
			my $strand1 = $sta1 > $end1 ? -1 : 1;
			my $strand2 = $sta2 > $end2 ? -1 : 1;

			($sta1,$end1) = ($end1,$sta1) if (-1 == $strand1);
			($sta2,$end2) = ($end2,$sta2) if (-1 == $strand2);
			
			my $sta1_coord = $par{ox} + $axis->fetch_dis($sta1);
			my $end1_coord = $par{ox} + $axis->fetch_dis($end1);
			my $sta2_coord = $par{ox} + $axis->fetch_dis($sta2);
			my $end2_coord = $par{ox} + $axis->fetch_dis($end2);

			my $Rnum = int (255 * $iden / 100);
			my $color1 = SBV::Colors::fetch_color("$Rnum,0,0");
			my $color2 = SBV::Colors::fetch_color("0,$Rnum,0");
			
			# draw subject and query block
			$parent->rect(x=>$sta1_coord,y=>$y,width=>$end1_coord-$sta1_coord,height=>$textH,
				style=>"fill:$color1",rx=>$textH/2,ry=>$textH/2);
			$parent->rect(x=>$sta2_coord,y=>$y+$unitH-$textH,width=>$end2_coord-$sta2_coord,
				height=>$textH,style=>"fill:$color1",rx=>$textH/2,ry=>$textH/2);
			
			($sta1_coord,$end1_coord) = ($end1_coord,$sta1_coord) if (-1 == $strand1);
			($sta2_coord,$end2_coord) = ($end2_coord,$sta2_coord) if (-1 == $strand2);
			my $xv = [$sta1_coord,$end1_coord,$end2_coord,$sta2_coord];
			my $yv = [$y+$textH+$vi,$y+$textH+$vi,$y+$unitH-$textH-$vi,$y+$unitH-$textH-$vi];
			my $points = $parent->get_path(x=>$xv,y=>$yv,-type=>'polygon');
			$parent->polygon(%$points,style=>{fill=>$color2});
		}

		$y += $unitH + $vi*2;
	}
	
	# draw color direction bar of identity
	$y += 2*$vi + $barH;
	my $fill1 = SBV::Colors::gradient(['#000','#f00']);
	my $fill2 = SBV::Colors::gradient(['#000','#0f0']);
	$parent->rect(x=>$par{ox},y=>$y,width=>$axis->{length},height=>$barH/2,style=>"fill:$fill1");
	$parent->rect(x=>$par{ox},y=>$y+$barH/2,width=>$axis->{length},height=>$barH/2,style=>"fill:$fill2");
	$y += $barH;
	my $textX = $par{ox} - $font->fetch_text_width('identity') - $hi; 
	$parent->text(x=>$textX,y=>$y)->cdata("identity");

	%par = (tick=>"0 100 20",side=>"right",oy=>$y,ox=>$conf->{ox}+$leftW+$SBV::conf->{hspace},
		length=>$par{length},parent=>$par{parent},bone=>0,translate=>0,start=>0);
	my $color_axis = SBV::STONE::AXIS->new(%par);
	$color_axis->plot;
	$y += $color_axis->thickness;

	# resize the SVG graph
	my $margin = SBV::CONF::fetch_margin($conf);
	$y += $margin->{bottom};
	$margin = SBV::CONF::fetch_margin();
	$y += $margin->{bottom};
	
	my $bg = $SBV::conf->{background} ? 1 : 0;
	SBV::DRAW::resize(height=>$y,bg=>$bg);
}
