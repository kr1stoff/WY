package SBV::IMAGE;
#------------------------------------------------+
#    [APM] This moudle is generated by amp.pl    |
#    [APM] Creat time: 2013-05-16 10:23:09       |
#------------------------------------------------+
=pod

=head1 Name

SBV::IMAGE

=head1 Synopsis

This module is not meant to be used directly

=head1 Feedback

Author: Peng Ai
Email:  aipeng0520@163.com

=head1 Version

Version history

=head2 v1.0

Date: 2013-05-16 10:23:09

=cut

use strict;
use warnings;
require Exporter;
our @ISA = qw(Exporter);
our @EXPORT    = qw(PLOT);
#our @EXPORT_OK = qw( );

use Math::Round;

use FindBin;
use lib "$FindBin::RealBin";
use lib "$FindBin::RealBin/lib";
use lib "$FindBin::RealBin/../";
use lib "$FindBin::RealBin/../lib";

use SBV;
use SBV::DEBUG;
use SBV::DRAW;
use SBV::CONF;
use SBV::Colors;
use SBV::Font;
use SBV::Constants;
use SBV::STAT;

use SBV::STONE::SYMBOL;
use SBV::STONE::LEGEND;
use SBV::STONE::THEME;

use SBV::Coordinate::RECTANG;
use SBV::Coordinate::POLAR;

use SBV::IMAGE::VENN;
use SBV::IMAGE::PPI;
use SBV::IMAGE::PIE;
use SBV::IMAGE::FREQ;
use SBV::IMAGE::ALIGN;
use SBV::IMAGE::TREE;
use SBV::IMAGE::HEATMAP;
use SBV::IMAGE::KARYO;
use SBV::IMAGE::SDU;
use SBV::IMAGE::HCGD;
use SBV::IMAGE::TAXTREE;
use SBV::IMAGE::COMBAR;

# draw rplot (range plot)
sub RPLOT
{
	my $files = shift;
	my $conf  = shift;
	my $parent = shift || $SBV::svg;
	
	my @xval;
	my @yval;
	my @data;
	foreach my$file (@$files)
	{
		my $data = SBV::DATA->new(-file=>$file,-format=>'list2',-conf=>$conf);
		my @names = $data->names;
		push @xval , $_ foreach (@names);
        
# reshape the data for ggplot2 plot
		$data = SBV::DATA::Frame->new($data,-format=>"list2");
		push @yval , $_ foreach (@{$data->{col}->{'V2'}});
		push @data , $data;
	}
	
	@xval = uniq_arr(\@xval);
	my $num = scalar @xval;

	if (! exists $conf->{xlim})
	{
		$conf->{xlim} = $conf->{xnames} ? "0 $num 1" : SBV::STAT::dividing(\@xval);
	}

	if (! exists $conf->{ylim})
	{
		$conf->{ylim} = SBV::STAT::dividing(\@yval);
	}

	my $rplot = $parent->group(id=>"rplot$SBV::idnum",class=>"plot");
	$SBV::idnum ++;
	
	# draw rplot
	my %par = (parent=>$rplot,data=>$data[0],conf=>$conf,xnames=>$conf->{xnames});
	my $ggplot = SBV::Coordinate::RECTANG->new(parent=>$rplot,conf=>$conf);
	
	my @cols = SBV::Colors::fetch_brewer_color($conf->{col});
    foreach my$i(0 .. $#data)
	{
		my $col = loop_arr(\@cols,$i);
		my $data = $data[$i];
		$ggplot->linerange(data=>$data,col=>['#000'],stat=>'normal');
		$ggplot->lines(data=>$data,col=>[$col],stat=>'mean');
		$ggplot->points(data=>$data,fill=>[$col],stat=>'mean');
	}
	
	$ggplot->{eval} = undef;
	$ggplot->draw;
	
	foreach my$i(0 .. $#data)
	{
		my $col = loop_arr(\@cols,$i);
		my $data = $data[$i];
		$ggplot->linerange(data=>$data,col=>['#000'],stat=>'normal',draw=>1);
		$ggplot->lines(data=>$data,col=>[$col],stat=>'mean',draw=>1);
		$ggplot->points(data=>$data,fill=>[$col],col=>['none'],stat=>'mean',draw=>1);
	}
	
	SBV::DRAW::plotMouseMove($rplot,$ggplot->{xaxis},$ggplot->{yaxis},evt=>"onmousemove") if ($conf->{animate});
}

#===  FUNCTION  ================================================================
#         NAME: MAPLOT
#      PURPOSE: draw MAPLOT two array data
#   PARAMETERS: two array data
#      RETURNS: maplot graph
#  DESCRIPTION: M = log2(V1/V2) = log2(V1) - log2(V2) (y val)
#               A = 0.5 * log2(V1*V2) = 0.5 * (log2(V1) + log2(V2)) (x val)
#       THROWS: no exceptions
#     COMMENTS: none
#     SEE ALSO: n/a
#===============================================================================
sub MAPLOT
{
	my $data = shift;
	my $conf = shift;
	my $parent = shift || $SBV::svg;
	
	my %par = ();
	if (exists $conf->{ev1} && exists $conf->{ev2})
	{
		$par{x} = $conf->{ev1};
		$par{y} = $conf->{ev2};
	}

	$data = $conf->{draw_raplot} ? $data->toRA(%par) :  $data->toMA(%par);
	
	# run points of ggplot2
	my $par = qq(x=>"$conf->{ev1}",y=>"$conf->{ev2}",col=>['none'],shape=>[1],size=>$conf->{size});
	
	# get the color column
	if (exists $conf->{deg})
	{
		my @names = $data->names;
		if (aindex(\@names,$conf->{deg}) != -1)
		{
			my $deg = $conf->{deg};
			$par .= ",group=>\"$deg\"";
		}
		else
		{
			WARN("the column \"$conf->{deg}\" is not exists in the data frame!");
			delete $conf->{legend};
		}
	}
	else
	{
		delete $conf->{legend};
	}
	
	my @eval;
	push @eval , "points($par)";
	
	if (my$hline = $conf->{hline})
	{
		my $num = $hline->{value} || 2;
		my $col = $hline->{stroke_color} || "#f00";
		my $width = $hline->{stroke_width} || 1;
		my $style = "stroke:$col;stroke-width:$width;";
		$style .= "stroke-dasharray:$hline->{stroke_dasharray};" if (exists $hline->{stroke_dasharray});
		push @eval , "hline([-$num,+$num],style=>\"$style\")";
	}
	
	_add_ggplot2($conf->{'eval'},\@eval) if (defined $conf->{'eval'});
	exec_ggplot2($data,$conf,\@eval,$parent);
}


sub Volcano_plot {
	my $data = shift;
	my $conf = shift;
	my $parent = shift || $SBV::svg;
	
    my %par = ();
	if (exists $conf->{log2fc} && exists $conf->{fdr} && exists $conf->{degs}) {
		$par{x} = $conf->{log2fc};
		$par{y} = $conf->{fdr};
        $par{z} = $conf->{degs};
    } else {
        ERROR("log2gc, fdr and degs must be defined");
    }
    $par{x_zoom_quartile} = $conf->{x_zoom_quartile} if $conf->{x_zoom_quartile};
    $par{y_zoom_quartile} = $conf->{y_zoom_quartile} if $conf->{y_zoom_quartile};

    $data = $data->toVolcano(%par);
    my $xlim = max( [ max($data->{col}->{$conf->{log2fc}}) , abs(min($data->{col}->{$conf->{log2fc}})) ] );
	
    # run points of ggplot2
	my $par = qq(x=>"$conf->{log2fc}",y=>"$conf->{fdr}",group=>"$conf->{degs}",col=>['none'],shape=>[1],size=>$conf->{size});
    my @eval;
	push @eval , "points($par)";
    push @eval , "setXlim(-10,10)";
	
    if (my$hline = $conf->{hline})
	{
		my $num = $hline->{value} || 2;
		my $col = $hline->{stroke_color} || "#f00";
		my $width = $hline->{stroke_width} || 1;
		my $style = "stroke:$col;stroke-width:$width;";
		$style .= "stroke-dasharray:$hline->{stroke_dasharray};" if (exists $hline->{stroke_dasharray});
		push @eval , "hline([-$num,+$num],style=>\"$style\")";
	}

	_add_ggplot2($conf->{'eval'},\@eval) if (defined $conf->{'eval'});
	exec_ggplot2($data,$conf,\@eval,$parent);
}

#===  FUNCTION  ================================================================
#         NAME: MANHATTAN
#      PURPOSE: draw Manhattan plot for show GWAS result
#   PARAMETERS: GWAS result, chromsome length
#      RETURNS: Manhattan plot
#  DESCRIPTION: You can add the -log10(pvalue) threshold line 
#       THROWS: no exceptions
#     COMMENTS: none
#     SEE ALSO: n/a
#===============================================================================
sub MANHATTAN
{
	my $data = shift;
	my $conf = shift;
	my $parent = shift || $SBV::svg;
	
	my $lenF = check_path($conf->{'length'});
	my $coord = SBV::DATA->new(-file=>$lenF,-format=>'chrlen',-conf=>$conf);
	my $sumlen = $coord->{sum};
	$data = $data->toManhattan(-coord=>$coord);
	
	$conf->{xaxis}->{tick} = "1 $sumlen $sumlen";
	$conf->{xaxis}->{show_tick_line} = 0;
	$conf->{xaxis}->{show_tick_label} = 0;
	$conf->{xaxis}->{start} = 0;
	$conf->{yaxis}->{start} = 0.1;

	my @labels;
	foreach (keys %$coord) 
	{
		next if $_ eq "sum";
		my $sta = $coord->{$_}->{start};
		my $end = $coord->{$_}->{end};
		my $mid = ($sta + $end) / 2;
		push @labels , [$mid,$_];
	}
	
	$conf->{xaxis}->{labels} = \@labels;
	my $shape = $conf->{shape};
	
	my @eval;
	if ($conf->{'eval'})
	{
		@eval = map {$conf->{'eval'}->{$_}} sort {$a<=>$b} keys %{$conf->{'eval'}};
	}
	
	unshift @eval , "points(shape=>[$shape],stroke_width=>0,group=>\"V3\",size=>$conf->{size})";
	
	exec_ggplot2($data,$conf,\@eval,$parent);
}

sub CHRPLOT
{
	my $data = shift;
	my $conf = shift;
	my $parent = shift || $SBV::svg;
	
	my $lenF = check_path($conf->{'length'});
	my $coord = SBV::DATA->new(-file=>$lenF,-format=>'chrlen',-conf=>$conf);
	my $sumlen = $coord->{sum};
	$data = $data->toCHRPLOT(-coord=>$coord);
	
	$conf->{xaxis}->{tick} = "1 $sumlen $sumlen";
	$conf->{xaxis}->{show_tick_line} = 0;
	$conf->{xaxis}->{show_tick_label} = 0;
	$conf->{xaxis}->{start} = 0;
	$conf->{yaxis}->{start} = 0.1;
	$conf->{yaxis}->{show_tick_line} = 1;
	
	my @labels;
	foreach (keys %$coord) 
	{
		next if $_ eq "sum";
		my $sta = $coord->{$_}->{start};
		my $end = $coord->{$_}->{end};
		my $mid = ($sta + $end) / 2;
		push @labels , [$mid,$_];
	}
	
	$conf->{xaxis}->{labels} = \@labels;
	
	my @eval;
	if ($conf->{'eval'})
	{
		@eval = map {$conf->{'eval'}->{$_}} sort {$a<=>$b} keys %{$conf->{'eval'}};
	}
	
	exec_ggplot2($data,$conf,\@eval,$parent);
}

# GGPLOT2
# draw graph like ggplot2 with <eval>
sub GGPLOT2
{
	my $data = shift;
	my $conf = shift;
	my $parent = shift || $SBV::svg;
    
    if ($conf->{'eval'})
	{
		my @eval = map {$conf->{'eval'}->{$_}} sort {$a<=>$b} keys %{$conf->{'eval'}};
		exec_ggplot2($data,$conf,\@eval,$parent);
	}
}

sub _add_ggplot2
{
	my $eval = shift;
	my $arr = shift;

	@$arr = map {$eval->{$_}} sort {$a<=>$b} keys %{$eval};

	return @$arr;
}

# boxplot
sub BOXPLOT
{
	my $data = shift;
	my $conf = shift;
	my $parent = shift || $SBV::svg;
	my @eval = ("boxplot()");
	exec_ggplot2($data,$conf,\@eval,$parent);
}

sub BUBBLE
{
	my $data = shift;
	my $conf = shift;
	my $parent = shift || $SBV::svg;
	my $zoom = $conf->{z_val_multiple};
	my @eval = ("bubble(zoom=>$zoom)");
	exec_ggplot2($data,$conf,\@eval,$parent);
}

# execute ggplot2 
sub exec_ggplot2
{
	my $data = shift;
	my $conf = shift;
	my $eval = shift;
	my $parent = shift || $SBV::svg;
	
	my $child = $parent->group(id=>"ggplot2$SBV::idnum",class=>"ggplot2");
	$SBV::idnum ++;
	
	my $ggplot = SBV::Coordinate::RECTANG->new(parent=>$child,data=>$data,conf=>$conf);
	
	foreach (@$eval)
	{
		my $cmd =  "\$ggplot->$_";
		my $temp = eval("$cmd");
        print "$cmd\n";
		ERROR('ggplot2_eval_err',$_) if (! defined $temp);
	}
	
	$ggplot->draw;

	SBV::DRAW::plotMouseMove($child,$ggplot->{xaxis},$ggplot->{yaxis},evt=>"onmousemove") if ($conf->{animate});
}


#===  FUNCTION  ================================================================
#         NAME: VENN
#      PURPOSE: draw venn graph from 2 to 5 samples
#   PARAMETERS: sample values list file (list2 format)
#      RETURNS: venn graph
#  DESCRIPTION: 
#       THROWS: no exceptions
#     COMMENTS: none
#     SEE ALSO: n/a
#===============================================================================
sub VENN
{
	my $data = shift;
	my $conf = shift;
	my $parent = shift || $SBV::svg;

	#my $venn = $parent->group(id=>"venn$SBV::idnum");
	my $venn = $parent->group(id=>"venn$SBV::idnum");
	$SBV::idnum ++;

	# background
	SBV::DRAW::background($conf,$venn);
	
	my $vennObj = SBV::IMAGE::VENN->new($data);
	$vennObj->stat();
	$vennObj->print(-file=>$conf->{'stat_file'}) if ($conf->{'print_stat_info'});
	$vennObj->graph($conf,$venn);

	$vennObj->animate($conf,$parent) if ($conf->{animate});
}

#===  FUNCTION  ================================================================
#         NAME: PPI
#      PURPOSE: DRAW protein protein interaction visualization chart
#   PARAMETERS: ppi data file
#      RETURNS: a svg graph
#  DESCRIPTION: ????
#       THROWS: no exceptions
#     COMMENTS: none
#     SEE ALSO: n/a
#===============================================================================
sub PPI
{
	my ($file,$conf,$parent) = @_;
	$parent ||= $SBV::svg;

	my $ppiObj = SBV::IMAGE::PPI->new($file,$conf);
	$ppiObj->plot($parent);
}

#===  FUNCTION  ================================================================
#         NAME: PIE
#      PURPOSE: draw pie graph
#===============================================================================
sub PIE
{
	my ($file,$conf,$parent) = @_;
	$parent ||= $SBV::svg;
	
	my $pieObj = SBV::IMAGE::PIE->new($file,$conf);
	$pieObj->plot($parent);
}

#-------------------------------------------------------------------------------
# name: FREQ -- stat the frequency of each na type in dnas or aa type in proteins 
#-------------------------------------------------------------------------------
sub FREQ
{
	my ($file,$conf,$parent) = @_;
	$parent ||= $SBV::svg;
	my $freqObj = SBV::IMAGE::FREQ->new($file,$conf);
	
	my @eval = $conf->{type} eq "protein" ? 
		("bar(group=>'V3',fill=>'V3',pileup=>1,letter=>['F','L','Y','C','W','P','H','Q','I','M','T','N','K','S','R','V','A','D','E','G'])")
		: ("bar(group=>'V3',fill=>'V3',pileup=>1,letter=>['A','T','C','G'])");
	exec_ggplot2($freqObj->{data},$conf,\@eval,$parent);
}

#-------------------------------------------------------------------------------
#  name: LASV -- local alignment search visualization
#-------------------------------------------------------------------------------
sub LASV
{
	my ($data,$conf) = @_;
	
	my $alignObj = SBV::IMAGE::ALIGN->new($data);
	my $dir = $SBV::conf->{'dir'} || ".";
	foreach my$name (sort keys %{$data->{align}})
	{
		$SBV::idnum = 1;
		undef $SBV::svg; 
		my $parent = SBV::initSVG();
		my $lasv = $parent->group(id=>"ssav$SBV::idnum");
		$SBV::idnum++;

		SBV::DRAW::background($conf,$lasv);
		$alignObj->lasv($name,$conf,$parent);

		SBV::saveSVG("$dir/$name");
		last if ($conf->{draw_first});
	}
}


#-------------------------------------------------------------------------------
#  name: TREE -- phylogenetic tree visualization
#-------------------------------------------------------------------------------
sub TREE
{
	my ($file,$conf,$parent) = @_;
	$parent ||= $SBV::svg;
	my $treev = SBV::IMAGE::TREE->new($file,$conf);
	$treev->plot($parent);
}


#-------------------------------------------------------------------------------
#  name: HEATMAP -- heatmap for frame data
#-------------------------------------------------------------------------------
sub HEATMAP
{
	my ($file,$conf,$parent) = @_;
	$parent ||= $SBV::svg;
	
	my $heatmap = SBV::IMAGE::HEATMAP->new($file,$conf);
	$heatmap->plot($parent);
}


#-------------------------------------------------------------------------------
#  name: TAXTREE
#-------------------------------------------------------------------------------
sub TAXTREE
{
	my ($file,$conf,$parent) = @_;
	$parent ||= $SBV::svg;
	my $taxtree = SBV::IMAGE::TAXTREE->new($file,$conf);
	$taxtree->plot($parent);
}


#-------------------------------------------------------------------------------
#  name: COMBAR
#-------------------------------------------------------------------------------
sub COMBAR
{
	my ($file,$conf,$parent) = @_;
	$parent ||= $SBV::svg;
	my $combar = SBV::IMAGE::COMBAR->new($file,$conf);
	$combar->plot($parent);
}

#-------------------------------------------------------------------------------
#  name: HEATMAP2 -- heatmap whose row ids contain taxonomy information
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
#  name: KARYO -- karyotype figure
#-------------------------------------------------------------------------------
sub KARYO
{
	my ($data,$conf,$parent) = @_;
	$parent ||= $SBV::svg;

	my $karyo = SBV::IMAGE::KARYO->new($data,$conf);
	$karyo->plot($parent);
}

#-------------------------------------------------------------------------------
# name: HCGD -- human chromsomes G-binding diagram 
#-------------------------------------------------------------------------------
sub HCGD
{
	my ($data,$conf,$parent) = @_;
	$parent ||= $SBV::svg;

	my $hcgd = SBV::IMAGE::HCGD->new($data,$conf);
	$hcgd->plot($parent);
}

#-------------------------------------------------------------------------------
#  name: SDU -- sequence dress up figure
#-------------------------------------------------------------------------------
sub SDU
{
	my ($data,$conf,$parent) = @_;
	$parent ||= $SBV::svg;
	
	my $sdu = SBV::IMAGE::SDU->new($data,$conf);
	$sdu->plot($parent);
}

#----------------------------
# sub program
#----------------------------
sub extends_conf
{
	my $parent = shift;
	my $child = shift;

	if (! $child->{'raise_r'})
	{
		$child->{'raise_r'} = $parent->{'raise_r'} || 0;
	}

	if (! $child->{'level_width'})
	{
		$child->{'level_width'} = $parent->{'level_width'} || 100;
	}

	if (! $child->{ox} || ! $child->{oy})
	{
		if (! $parent->{ox} )
		{
			$parent->{ox} = $SBV::conf->{width}	/2;
		}

		if (! $parent->{oy} )
		{
			$parent->{oy} = $SBV::conf->{height}/2;
		}

		my $dis = $child->{dis} || 100;
		my $angle = $child->{angle} || 0;

		$dis += $parent->{'level_width'} + $child->{'level_width'};
		$child->{ox} = $parent->{ox} + $dis*cos($angle);
		$child->{oy} = $parent->{oy} + $dis*sin($angle);
	}
}

