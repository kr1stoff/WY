#!/usr/bin/perl
#-------------------------------------------------+
#    [APM] This script was generated by amp.pl    |
#    [APM] Created time: 2014-12-19 17:30:00      |
#-------------------------------------------------+
# name: tax2nhx.pl
# func: 
# version: 0.1

use strict;
use warnings;

die "
Usage:   perl $0 <input taxonomy file> [output keyname]

Example: perl $0 /home/aipeng/work/develepment/SBV/data/taxtree/all.tsv

Note:    1. [output keyname] is optional, default is 'temp'
         2. <input taxonomy file>, contains at least 3 fields, Taxonomy,sample[s],total_percent
            2.1 must contain the header information, the samples names will be displayed in the legend region
            2.2 the last field name must be fixed as 'total_percent'
            2.3 the first field must be taxonomy information, separated by ';'
         3. this script will create two files, one is the nhx tree file [temp.nhx], 
            another is the percent info file [temp.percent]
\n" unless (@ARGV == 1 || @ARGV == 2);

my $file = shift @ARGV;
my $keyname = shift @ARGV || "temp";

open IN,$file or die $!;

open OUT1 , ">$keyname.nhx";
open OUT2 , ">$keyname.perent";

my $head = <IN>;
print OUT2 $head;

my %hash;
my %leaves;

# set the root 
my $root = "0_Mirobe";

my %count;

while(<IN>)
{
	chomp;
	my ($classify,@values) = (split /\t/);
	my @array = split /;/ , $classify;

	# save the nodes of 1-7 levels taxonomy
	foreach my$i(1 .. $#array)
	{
		my $j = $i+1;
		my $child = $j . "_" . $array[$i];
		my $father = $i . "_" . $array[$i-1];
		
		$hash{$child}{father} = $father;
		$hash{$father}{children}{$child} = 1;
	}
	
	my $frt = "1_$array[0]";

	# save root 
	if ($root)
	{
		$hash{$frt}{father} = $root;
		$hash{$root}{father} = undef;
		$hash{$root}{children}{$frt} = 1;
	}
	
	# create perentage file 
	my $len = scalar @array;
	my $last = $len . "_" . $array[-1];
	
	if ($len > 1)
	{
		my $len2 = $len - 1;
		$last = $len2 . "_" . $array[-2] . ";" . $last;
	}

	unshift @values , $last;
	my $line = join "\t" , @values;
	print OUT2 $line . "\n";
}


print_nhx($root,\%hash,1);

my @leaves = grep { ! $hash{$_}{children} } keys %hash;
my $num = scalar @leaves;
my $r = 20;
my $min_height = $num*$r*2.2 + 40;
my $max_height = $num*$r*2.8 + 40;
print STDERR "Sum leaves number: $num\n";
print STDERR "The suggestion height is in $min_height ~ $max_height, with 40px default margin and 20px default raduis.\n";

sub print_nhx
{
	my ($node,$hash,$isLast) = @_;
	
	if (defined $$hash{$node}{father})
	{
		if (! $$hash{$node}{children}) # leaf 
		{
			if ($isLast)
			{
				print OUT1 $node;
			}
			else 
			{
				print OUT1 "$node,";
			}
		}
		else # non-leaf nodes 
		{
			my @children = keys %{$$hash{$node}{children}};
			print OUT1 "(";
			foreach my$i(0 .. $#children)
			{
				print_nhx($children[$i],\%hash,$i==$#children);
			}
			if ($isLast)
			{
				print OUT1 ")$node";
			}
			else 
			{
				print OUT1 ")$node,";
			}
		}
	}
	else 
	{
		my @children = keys %{$$hash{$node}{children}};

		print OUT1 "(";
		foreach my$i(0 .. $#children)
		{
			print_nhx($children[$i],\%hash,$i==$#children);
		}
		print OUT1 ")$node;";
	}
}
