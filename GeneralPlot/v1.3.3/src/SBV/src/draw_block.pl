#!/usr/bin/perl
#-------------------------------------------------+
#    [APM] This script was generated by amp.pl    |
#    [APM] Created time: 2015-12-20 21:13:07      |
#-------------------------------------------------+
# name: draw_block.pl
# func: 
# version:: 0.1

use strict;
use warnings;

use Getopt::Std;

my $sbv = "perl /home/aipeng/work/develepment/SBV/bin/sbv.pl";

my %opts = (l=>50000,p=>"Part",t=>"10kbp");
getopts('l:p:t:',\%opts);

die qq(Funcs:   used to display the elements in one sequence with multi line with SBV

Usage:   perl $0 [options] <gff> <sequence length>

Options: -l INT    the maximum length of each line, [$opts{l}]
         -t STR    the unit tick, [$opts{t}]

Example: perl draw_block.pl FJ-2012.genemarks.gff 144863 (wd: /Bio/User/aipeng/project/block)
\n) unless @ARGV == 2;

# the gff file to set the block 
my $file = shift @ARGV;
my ($seqid,%element) = read_element($file);

# the sum sequence length 
my $len = shift @ARGV;

# the cut number of sequence
my $num = int ($len / $opts{l});
$num ++ unless ($num == $len/$opts{l});

# parse the options for sbv conf 
my $width = 800 + 20*2;
my $height = 160 * $num + 20 * 2;
my $tick = $opts{t};
my $spacing;
my $tick_label;
my $label_multiplier;

if ($tick =~ /^\d+$/)
{
	my $len = length ($tick);
	if ($len > 6)
	{
		$label_multiplier = 1e-6;
		$tick_label = "Mbp";
		$spacing = $tick;
	}
	elsif ($len > 3)
	{
		$label_multiplier = 1e-3;
		$tick_label = "Kbp";
		$spacing = $tick;
	}
}
elsif ($tick =~ /^(\d+)(\w+)$/)
{
	$spacing = $1;
	$tick_label = $2;

	if ($tick_label =~ /^M/i)
	{
		$label_multiplier = 1e-6;
	}
	elsif ($tick_label =~ /^K/i)
	{
		$label_multiplier = 1e-3;
	}
	else 
	{
		die "ERROR: uncorrect tick label, [$tick_label] set by -t\n";
	}
	
	$spacing = $spacing/$label_multiplier;
}

my $subspacing = $spacing / 5;

&create_karyo_file($seqid,$len,$num,$opts{l},$opts{p});
&create_highlights_file($seqid,%element);
&create_conf_file($seqid);
system("$sbv karyo -conf $seqid.karyo.conf");

#-------------------------------------------------------------------------------
#  sun function 
#-------------------------------------------------------------------------------
sub create_karyo_file 
{
	my ($seqid,$len,$num,$window,$prefix) = @_;

	open OUT,">$seqid.karyotype.txt" or die $!;

	my $loci = 0;
	foreach (1 .. $num)
	{
		my $start = $loci;
		my $end = $loci + $window - 1;
		$loci = $end + 1;
		$end = $len if ($end > $len);

		my $tag = $prefix . "$_";
		print OUT "$tag\t$tag\t$start\t$end\tblack\n";
	}
	close OUT;
}

sub create_highlights_file
{
	my ($seqid,%hash) = @_;

	my $file = "$seqid.highlights.txt";
	my $file2 = "$seqid.up.texts.txt";
	my $file3 = "$seqid.down.texts.txt";
	open OUT,">",$file or die $!;
	open OUT2,">",$file2 or die $!;
	open OUT3,">",$file3 or die $!;
	foreach my$id (sort keys %hash)
	{
		my ($sta,$end,$strand) = @{$hash{$id}};
		my $index = int ($sta/$opts{l});
		$index ++ unless ($index == $sta/$opts{l});
		
		my $index2 = int ($end/$opts{l});
		$index2 ++ unless ($index2 == $sta/$opts{l});
		
		my $chrid = $opts{p} . $index;
		my ($shape,$fill,$loc0,$loc1,$text_loc0,$text_loc1);
		my $arrow_width = "auto";

		if ($strand eq "+")
		{
			$shape = 25;
			$fill = "black";
			$loc0 = -4;
			$loc1 = -24;
			$text_loc0 = 28;
			$text_loc1 = 60;
		}
		else 
		{
			$shape = 24;
			$fill = "black";
			$loc0 = 4;
			$loc1 = 24;
			$text_loc0 = -28;
			$text_loc1 = -60;
		}
		
		if ($index == $index2)
		{
			print OUT "$chrid\t$sta\t$end\tshape=$shape;fill=$fill;stroke_width=0;label=$id;loc0=$loc0;loc1=$loc1;arrow_width=$arrow_width\n";
			if ($strand eq "+")
			{
				print OUT2 "$chrid\t$sta\t$end\t$id\tloc0=$text_loc0;loc1=$text_loc1;\n";
			}
			else 
			{
				print OUT3 "$chrid\t$sta\t$end\t$id\tloc0=$text_loc0;loc1=$text_loc1;color=red\n";
			}
		}
		else 
		{
			my $temp_end = $index * $opts{l} - 1;
			my $temp_sta = $temp_end + 1;
			my $chrid2 = $opts{p} . $index2;
			
			if ($strand eq "+")
			{
				print OUT "$chrid\t$sta\t$temp_end\tshape=0;fill=$fill;stroke_width=0;label=$id;loc0=$loc0;loc1=$loc1;arrow_width=$arrow_width\n";
				print OUT "$chrid2\t$temp_sta\t$end\tshape=$shape;fill=$fill;stroke_width=0;label=$id;loc0=$loc0;loc1=$loc1;arrow_width=$arrow_width\n";
				
				if ($temp_end - $sta > $end - $temp_sta)
				{
					print OUT2 "$chrid\t$sta\t$temp_end\t$id\tloc0=$text_loc0;loc1=$text_loc1;\n";
				}
				else 
				{
					print OUT2 "$chrid2\t$temp_sta\t$end\t$id\tloc0=$text_loc0;loc1=$text_loc1;\n";
				}
			}
			else 
			{
				print OUT "$chrid\t$sta\t$temp_end\tshape=$shape;fill=$fill;stroke_width=0;label=$id;loc0=$loc0;loc1=$loc1;arrow_width=$arrow_width\n";
				print OUT "$chrid2\t$temp_sta\t$end\tshape=0;fill=$fill;stroke_width=0;label=$id;loc0=$loc0;loc1=$loc1;arrow_width=$arrow_width\n";
				if ($temp_end - $sta > $end - $temp_sta)
				{
					print OUT2 "$chrid\t$sta\t$temp_end\t$id\tloc0=$text_loc0;loc1=$text_loc1;\n";
				}
				else 
				{
					print OUT2 "$chrid2\t$temp_sta\t$end\t$id\tloc0=$text_loc0;loc1=$text_loc1;\n";
				}
			}
		}
	}
	close OUT;
	close OUT2;
	close OUT3;
}

sub create_conf_file
{
	my $seqid = shift;
	my $file = "$seqid.karyo.conf";

	open OUT,">",$file or die $!;
	
	print OUT <<CONF;
dir = .
file = $seqid.karyo.svg 

width = $width
height = $height
margin = 20

<karyo>

file = $seqid.karyotype.txt
model = normal
start = 0.6r

<ideogram>
show = yes
thickness = 2
show_chromosomes_default = yes
show_label = no 
</ideogram>

<ticks>
#chromosomes = $seqid
offset = 65
orientation = up 
label_multiplier = $label_multiplier
unit_label = $tick_label
show_true_ticks = 1

<tick>
thickness = 1
size = 4
show_label = no 
spacing = $subspacing
</tick>
<tick>
thickness = 1
size = 8
show_label = yes
spacing = $spacing
</tick>

</ticks>

<highlights>

<highlight>
file = $seqid.highlights.txt
ideogram = no 
</highlight>

</highlights>

<plots>

<plot>
file = $seqid.up.texts.txt
type = text 

theme = size:10;angle:0;weight:bold;fill:000
show_links = no 
fill = 000 
ideogram_highlights = no 
allow_overlap = no 
snuggle_layer = 2
</plot>

<plot>
file = $seqid.down.texts.txt
type = text 

theme = size:10;angle:0;weight:bold;fill:000
show_links = no 
fill = 000 
ideogram_highlights = no 
allow_overlap = no 
snuggle_layer = 2
</plot>

</plots>

</karyo>
CONF
	
	close OUT;
}

sub read_element
{
	my $file = shift;
	my %hash;
	my %seqid;

	my $id = "00";
	open IN,$file or die $!;
	while(<IN>)
	{
		next if (/^#/);
		chomp;
		my ($seqid,$flag,$sta,$end,$strand,$attrs) = (split /\t/)[0,2,3,4,6,-1];

		next unless $flag eq "gene";
		$id ++;

		$hash{$id} = [$sta,$end,$strand];
		$seqid{$seqid} = 1;
	}
	close IN;

	my $seq_num = scalar keys %seqid;
	die "ERROR: The sequence is more one!" if ($seq_num > 1);
	
	my @seqid = keys %seqid;
	return ($seqid[0],%hash);
}
