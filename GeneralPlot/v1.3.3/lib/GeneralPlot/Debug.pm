package GeneralPlot::Debug;
#------------------------------------------------+
#    [APM] This moudle is generated by amp.pl    |
#    [APM] Creat time: 2013-05-13 09:47:42       |
#------------------------------------------------+
=pod

=head1 Name

DEBUG => debug routines

=head1 Synopsis

This module is not meant to be used directly

=head1 Feedback

Author: Peng Ai
Email:  aipeng0520@163.com

=head1 Version

Version history

=head2 v1.0

Date: 2013-05-13 09:47:42

=cut


use strict;
use warnings;

require Exporter;
our @ISA = qw(Exporter);
our @EXPORT = qw(timeLOG stateLOG LOG WARN VITAL_WARN ERROR check_path ftime color_text);

use Cwd 'abs_path';

use FindBin;
use Carp qw(carp confess croak);

use lib "$FindBin::RealBin";
use lib "$FindBin::RealBin/lib";
use lib "$FindBin::RealBin/..";
use lib "$FindBin::RealBin/../lib";
use lib "$FindBin::RealBin/../..";

sub timeLOG
{
	my $timeH = "[" . ftime() . "]";
	print "$timeH @_\n";
}

sub stateLOG 
{
	my ($flag, @msgs) = @_;
	return 1 unless @msgs;

	my $flag_c = _color_state($flag);
	print "$flag_c @msgs\n";

	if($flag eq 'Error') {
		die "__", color_text("Execution terminated for above reasons", 'red'), "__\n";
	}

	return 0;
}

sub LOG
{
	print "@_\n";
}

sub WARN
{
	carp "WARN: @_\n";
}

sub VITAL_WARN
{
	print STDERR "VITAL WARN: @_\n";
}

sub ERROR
{
	my $ename = shift;
	my $error = $ename;
	confess "FATAL ERROR: $error, [@_]\n";
}

sub check_path
{
	foreach my $file (@_)
	{
		ERROR("the is not defined!") unless $file;
		my @posibilities = (
				$file,
				"$FindBin::RealBin/$file",
				"$FindBin::RealBin/../$file",
				"$FindBin::RealBin/etc/$file",
				"$FindBin::RealBin/../etc/$file",
				"$FindBin::RealBin/data/$file",
				"$FindBin::RealBin/../data/$file",
				"$FindBin::RealBin/example/$file",
				"$FindBin::RealBin/../example/$file"
		);
		my $fullfile;
		
		foreach (@posibilities)
		{
			if (-e $_ && -r $_)
			{
				$fullfile = $_;
				return abs_path($_);
			}
		}
		
	}
	
	ERROR("no_file_exists", @_);
}

sub ftime
{
	my ($sec,$min,$hour,$day,$mon,$year,$wday,$yday,$isdst) = localtime();
	$year += 1900;
	$mon += 1;
	 
	my $ftime = sprintf("%d\-%02d\-%02d %02d:%02d:%02d", $year,$mon,$day,$hour,$min,$sec);
	return $ftime;
}

sub color_text 
{
	my ($text, $color) = @_;

	my %colors = (
        black => "\033[30m",
        red => "\033[31m",
        green => "\033[32m",
        yellow => "\033[33m",
        blue => "\033[34m",
        purple => "\033[35m",
        cyan => "\033[36m",
        white => "\033[37m",
        plain => "\033[0m",
    );

	$color = lc($color);
	if(defined $colors{$color}) 
	{
		return $colors{$color} . $text . $colors{plain};
	} 
	else 
	{
		WARN("cannot find the color [$color] in default settings.");
		return $text;
	}
}

sub _color_state 
{
	my $word = shift;
    return ( join( "",
        "[", $word eq 'Running'     ? color_text('Running', 'green')
           : $word eq 'Finished'    ? color_text('Finished', 'green')
           : $word eq 'Error'       ? color_text('Error', 'red')
           : $word eq 'Warning'     ? color_text('Warning', 'yellow')
           : $word eq 'NotRun'      ? color_text('NotRun', 'cyan')
           : $word, "]"),
    );
}

